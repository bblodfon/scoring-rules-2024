{
  "hash": "65a924120ec32acaa7c818e020093192",
  "result": {
    "markdown": "---\ntitle: \"Benchmark results analysis\"\nauthor: \"[John Zobolas](https://github.com/bblodfon)\"\ndate: last-modified\ndescription: \"Explore the relationship between proper and improper Integrated Brier Score in the validation of survival models\"\nbibliography: references.bib\nformat:\n  html:\n    date: last-modified\n    code-block-bg: true\n    code-copy: true\n    code-fold: true\n    code-overflow: wrap\n    code-block-border-left: true\n    toc: true\n    toc-location: left\n    html-math-method: katex\n    page-layout: full\nexecute:\n  freeze: true\n---\n\n\n\n\n## Aim {-}\n\nWe benchmark the two versions of the survival brier score  [@Graf1999], namely the **Integrated Survival Brier Score (ISBS)** and the proposed **we-weighted version (RISBS)** (see [documentation details](https://mlr3proba.mlr-org.com/reference/mlr_measures_surv.graf.html#details) for their respective formulas).\nThe first (ISBS) is not a proper scoring rule [@Rindt2022], the second (RISBS) is [@Sonabend2022].\nOur goal is to assess whether these scores exhibit differences in simulated and real-world datasets, and if so, to understand the reasons behind these differences.\n\nLoad libraries:\n\n::: {.cell result='false'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(mlr3proba)\nlibrary(DT)\nlibrary(ggpubr)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\n```\n:::\n\n\n## Simulated Data Results {-}\n\n:::{.callout-note}\n- [Code](https://github.com/bblodfon/scoring-rules-2024/blob/main/generate.R) to generate the simulated datasets.\n\nWe simulate datasets with **varying characteristics**:\n\n1. Independent (random) vs dependent censoring\n2. PH (Proportional Hazards) vs non-PH data (time-varying coefficients)\n3. Proportion of censoring ($10\\% - 80\\%$)\n4. Number of observations ($100 - 1000$)\n\nThe 'fixed' parameters in our simulations are the following:\n\n- Time horizon (max event or censoring time): **365 days**\n- Number of datasets to generate per (1)-(4) combinations: $100$\n- Number of covariates per dataset (chosen randomly): $3-10$ (low-dim setting)\n:::\n\n### Introduction {-}\n\nFor each simulated dataset, we performed a simple train/test resampling (70%/30%).\nEach resampling was stratified using the `status` variable so that the proportion of censoring remains the same in each respective train and test set.\n\nWe trained 3 models in each respective train set, namely the **Kaplan-Meier**, the **Cox Proportional Hazards** (CoxPH) model and an **Accelerated Failure Time** (AFT) model with Weibull distribution for the time-to-event output variable.\nWe tested the performance of each model in each respective test set using the **ISBS** and **RISBS** measures, integrating up to the $80\\%$ quantile of the event times of each train set.\n\nGet the benchmark results:\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_0f404c7806ce1a1de54764d615d3f0af'}\n\n```{.r .cell-code}\nres = readRDS(file = \"res.rds\")\n```\n:::\n\n\n:::{.callout-tip title=\"Organization of Results\"}\nWe will divide the presentation of simulation data results in **4 sub-sections**, according to: \n\n1. Whether the simulated datasets were satisfying the proportional hazards assumption and \n2. Whether censoring was dependent or not from the survival outcome.\n:::\n\n### Prop. Hazards and Independent Censoring {-}\n\nFor each combo of number of observations (`n_obs`) and proportion of censoring (`cens_prop`) variables ($100$ simulated datasets per combo), we calculate the following summary stats: **Pearson correlation**, **mean absolute difference** and its standard deviation, **root mean square error (RMSE)**:\n\n::: {.cell}\n\n```{.r .cell-code}\nres_ph_ind = \n  res |> \n  drop_na() |> # exclude few datasets where AFT prediction didn't work\n  filter(prop_haz == TRUE, cens_dep == FALSE) |>\n  group_by(n_obs, cens_prop) |>\n  summarize(\n    .groups = \"drop\",\n    km_cor  = cor(km_proper, km_improper),\n    cox_cor = cor(cox_proper, cox_improper),\n    aft_cor = cor(aft_proper, aft_improper),\n    km_diff_mean  = mean(abs(km_proper - km_improper)),\n    cox_diff_mean = mean(abs(cox_proper - cox_improper)),\n    aft_diff_mean = mean(abs(aft_proper - aft_improper)),\n    km_diff_sd    = sd(abs(km_proper - km_improper)),\n    cox_diff_sd   = sd(abs(cox_proper - cox_improper)),\n    aft_diff_sd   = sd(abs(aft_proper - aft_improper)),\n    km_rmse  = sqrt(mean(km_proper - km_improper)^2),\n    cox_rmse = sqrt(mean(cox_proper - cox_improper)^2),\n    aft_rmse = sqrt(mean(aft_proper - aft_improper)^2),\n)\n\nres_ph_ind |>\n  datatable(\n    rownames = FALSE,\n    options = list(pageLength = 10, searching = TRUE)) |>\n  formatRound(columns = 2:14, digits = c(1, rep(2,3), rep(3,9)))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-1fadcbc773a5ad4d459a\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-1fadcbc773a5ad4d459a\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[100,100,100,100,100,100,100,100,200,200,200,200,200,200,200,200,300,300,300,300,300,300,300,300,400,400,400,400,400,400,400,400,500,500,500,500,500,500,500,500,600,600,600,600,600,600,600,600,700,700,700,700,700,700,700,700,800,800,800,800,800,800,800,800,900,900,900,900,900,900,900,900,1000,1000,1000,1000,1000,1000,1000,1000],[0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8],[0.993714948218984,0.9852471156956693,0.9849987389439632,0.9879217649164536,0.9834719893595504,0.9918442258400123,0.9894880549107068,0.9976806994616128,0.9959879822530081,0.9937294750198898,0.9909160224725007,0.9856552956863304,0.9865089237213619,0.9870963705544815,0.9893364911215472,0.9959141252734031,0.9989726478454771,0.9931944032436268,0.9871408496306064,0.98820731654814,0.9908522753792715,0.9890810069098133,0.9955170680572121,0.9956638792646283,0.9982245531091852,0.9965308277627688,0.9892205511604117,0.9926264979979376,0.9918063761859183,0.9891154817849397,0.9942266965398747,0.9973514877880442,0.9986843493096832,0.9958101248366751,0.9914874363456506,0.9923333918050298,0.9896550273726007,0.9900177815541209,0.9959924391264779,0.9971634919585145,0.9981991843171656,0.9972598451200275,0.9956208343512899,0.9890316943863593,0.9890120919178798,0.9907779792642506,0.9927925836132195,0.9970325218736538,0.9984850350361059,0.9973184556380886,0.9953722040805312,0.9915529560166411,0.9901350469790139,0.9911945225552155,0.9938795643063343,0.997318801944367,0.9994298490443403,0.9974640643238866,0.99550900636423,0.9892636533643084,0.9907059032999148,0.9878210170010318,0.9927162763832456,0.9970183254643585,0.9991150575519238,0.9970346997063678,0.9947932362493856,0.9945210695957081,0.9848551459686467,0.9839085278518368,0.9950819579362521,0.9973346281617689,0.9994199043709655,0.9981311398906556,0.9965724335134875,0.9936456901993483,0.9874775765588752,0.9850537864555858,0.9959965344329074,0.9973479616950881],[0.9939270723723909,0.979168671138438,0.9791542760131543,0.9705915289157845,0.9844375451438523,0.9732286913160855,0.9646898741768203,0.9618600484944619,0.9958226161344416,0.9919614191889287,0.9892698095449328,0.980714693041451,0.978548947109747,0.9836108306194778,0.9840983876402568,0.987563864825416,0.9985678999436155,0.9921558550719349,0.9882786509148906,0.9873414260440732,0.9900559171043212,0.9844439606560452,0.9931370795265757,0.9932896982783557,0.998193757137366,0.9958627819175462,0.9891953462148032,0.9925415564183243,0.9912701315765617,0.986870972839882,0.9928397918814256,0.996763993425839,0.9985936069191998,0.9955518644418991,0.9913629674149477,0.9927809539550083,0.989247405739889,0.989907022968373,0.9955111845549888,0.9964175124499526,0.9981033730048742,0.9973305230906604,0.9952676675976054,0.9897603659042866,0.9889764452946072,0.9903652495614406,0.9921032435430379,0.9965083634773517,0.9984955206239295,0.9969473977390571,0.9951805354606141,0.9909993063788094,0.9891148970356842,0.9908477782913039,0.9942085376540005,0.9968285893060043,0.999434093100356,0.9972863626564797,0.9955537336570872,0.9893590782375047,0.9905314038149066,0.98779041985581,0.9918141432102205,0.9968888387391386,0.9990874665797442,0.9969479724476839,0.9946129395018751,0.9944198025957574,0.9846603693481395,0.9842829787116243,0.9948513048822564,0.9968659131619974,0.9993491379868997,0.9980557617648831,0.996582117432772,0.9935754359564187,0.9874546309096548,0.9823519885575183,0.9956588041632463,0.9969056676838646],[0.9900976065416229,0.9748505983116202,0.9687201309170629,0.9544915101336097,0.9736031462295746,0.9491055789233159,0.954142752189836,0.940104849187157,0.993719885543102,0.9861659502374414,0.9759847815021292,0.9562931395720378,0.9588745513277334,0.9730768828774731,0.9682711462476014,0.9809240907340802,0.998230014238855,0.9846279859157142,0.974561710329598,0.978453676509179,0.9776207466773756,0.9676354191081744,0.98310380040447,0.9851514999828567,0.9967841010766019,0.9907909461725063,0.9838943459981637,0.9798124596072602,0.9683673682294983,0.9689333210250854,0.9843361075820675,0.9867468094782638,0.997060437160189,0.9911219719888685,0.9866063762986395,0.9801002924758141,0.9797477836590419,0.9775236637560113,0.9872428872475104,0.991904800654272,0.9971573709063419,0.994659022079677,0.9912300695044103,0.9847590322533699,0.9778802372561718,0.9754405089651627,0.9853090726986794,0.992182115146975,0.9972469464682298,0.9918114678634631,0.9880143522285812,0.9806022332877254,0.9784109793320112,0.9821444385613907,0.9879517190265138,0.9914866335752902,0.9987045574659315,0.9948055039716572,0.9902027624967196,0.9777528991729094,0.9750760408242076,0.9766989203419876,0.9807269673599029,0.9917796915031951,0.9982496863645115,0.9925039132729629,0.9896040262877613,0.9866802368980283,0.9713496445601438,0.968832784705267,0.9886154244342085,0.9913280209815334,0.9986329770060082,0.9962519777379346,0.991648318588612,0.9871652014576107,0.9744531598330033,0.9732862579254578,0.9879098884973178,0.9900843544459027],[0.003837749410593688,0.005236579368236349,0.008135236483586217,0.00829938295402974,0.01144183127782571,0.008895331914055138,0.007906204037652617,0.00436430189406077,0.002796997215240805,0.006040789730232143,0.007349641608033199,0.009555652369625085,0.01087445853382489,0.00944345775650288,0.007738073253899993,0.004692861312078545,0.002993904518083322,0.005213179971802387,0.008289340894493109,0.00871168504822927,0.008976058112741544,0.01008430748838366,0.007036546482923055,0.005038869591384961,0.00315709747399619,0.004868191171240696,0.008583527359275547,0.009448072494598708,0.00930525980187921,0.009877920650014955,0.008350348544675625,0.004984016825693208,0.00286049978460731,0.005135857523582168,0.007847911900429933,0.009260125494190287,0.01071947885930342,0.01010004494630283,0.007825253489697761,0.004717604878743573,0.003120979144981308,0.005030966711379945,0.008200297980753687,0.009219972134215508,0.0111439339910703,0.009965701970061783,0.007692278735208963,0.004982583753182429,0.002956305687772394,0.005142463822210643,0.007900212964394623,0.009568779315767616,0.009505373198495535,0.009679914808933553,0.007508659853078729,0.005073268573194292,0.002502252183339322,0.005035996197085356,0.007493435786027983,0.009865635877784343,0.01046230537411356,0.009821872381845466,0.007234640171819858,0.005163465850549787,0.002681522024814942,0.005487665241123468,0.007381069292350951,0.008624275363185462,0.01006843440659346,0.01030398978047409,0.008039117785717314,0.005086194957124956,0.002756508737706993,0.005122478550604037,0.00687846954224602,0.008835913896614473,0.01003280978880749,0.009699431757579393,0.007805304431366143,0.004664683979373232],[0.004100785517111099,0.006153302973055742,0.008710903578014687,0.0113785425666146,0.01203826374140227,0.01173930674722334,0.01323019392937667,0.009604288080762306,0.00281709546279958,0.006235831707153795,0.007693928869217645,0.01064695978453294,0.01151738351998131,0.01030523434860906,0.009032405867416118,0.006511673534299849,0.003171789148087517,0.005324111423935711,0.008469543609899948,0.009281364268180098,0.009568373777580548,0.01122402324192643,0.007758740699114616,0.005884019086911017,0.003204115322577761,0.005189569434939462,0.008746634720785551,0.00963014239862117,0.00985662183382963,0.01063041317752144,0.008972743780771793,0.005497459168080955,0.002888572699456083,0.005192271473723275,0.008006645554938371,0.009338913664978601,0.01091899841770716,0.01041907910383087,0.008321702156717894,0.005272325210807637,0.003236130517626341,0.005043134019755854,0.008303878643869009,0.009284197782964323,0.0115390105785366,0.01032963700353455,0.008142644238550822,0.005517958400649919,0.00295363848281098,0.005262151980699532,0.007992761531675883,0.009815045554888803,0.0099729813659404,0.009977635480740349,0.007634763049255232,0.005460492036206304,0.002549928822211491,0.005116203406061755,0.007658503014973879,0.009977292455800041,0.01058327511029507,0.01002236111556509,0.007638298638883081,0.005518325725349126,0.002678217485050033,0.005576636185601423,0.007538514782229708,0.008756706523477127,0.0102656675534177,0.01062645706112074,0.008459085578136061,0.005362201279206508,0.002824515870494902,0.005215806528127296,0.007012466737523997,0.008936877297132715,0.01005491858693244,0.01018194598859927,0.008079533511978135,0.004957121237988828],[0.005005418504527774,0.006894016863679116,0.01080912603169754,0.01435776908124867,0.01579328903657434,0.01567730554993656,0.0173362677160485,0.01275210675315967,0.003496928040283055,0.007754403144313377,0.01023803838280017,0.01477889501026106,0.01510786533920325,0.01291323861200753,0.01213466076552511,0.008925363514133648,0.003951117404731239,0.006621988540232679,0.01091209563612692,0.01182598612572546,0.01292799326111013,0.01566235261272896,0.01095850598137979,0.00857427353306694,0.003902652376432827,0.006299499597520175,0.01070125725593481,0.01349404678472572,0.01385778567291183,0.01455784635528671,0.01184318536833878,0.008286900505783141,0.003580000548238644,0.006619184121984918,0.01016430792635464,0.01225502614492644,0.01483555947971614,0.01440689786264793,0.011987032202494,0.007377815500130291,0.004134334197945212,0.006450481078960625,0.01023231704122166,0.01209763726014601,0.01509249987188559,0.01351402095933357,0.01119479525077252,0.008090302933796124,0.003538955160395401,0.006816549705704593,0.01026512719018415,0.01285626472547336,0.0138074170623075,0.01292790837567386,0.0108008005719306,0.007595531273225211,0.003189593223471549,0.006406634692708692,0.009918345752301359,0.01318293797191182,0.01424816568928122,0.01317045455694216,0.0103333099381554,0.007831245896973527,0.003304513476755018,0.006707540994107657,0.01025111565520379,0.01166137578139785,0.0133474579375575,0.01362071133902511,0.01126696257996472,0.007420520362050841,0.003555422661184686,0.00649626661210342,0.008943391413319519,0.01136926484022826,0.01331931733153923,0.01309537265820592,0.01176455511233944,0.007643638777976154],[0.003706727043535938,0.005024730645550014,0.007050764840331007,0.007052508594481451,0.008240633256792895,0.006622167122640792,0.008413038697989168,0.00346805789515692,0.003188918422887876,0.004896412394078247,0.005818250745582032,0.006991045632423634,0.006807613145773088,0.007129911104664112,0.006213572444445013,0.004326211770326708,0.002302480621571807,0.004148510173330991,0.006156953470464263,0.0058246037132459,0.005566603923153193,0.006289015801655305,0.004205201177712684,0.003557187070097124,0.00264459291457881,0.003711177837812142,0.005619444888514609,0.005197303210123039,0.005122978630728075,0.006659405925725489,0.004623900759594023,0.003308219346859503,0.002220825358976347,0.003424237073226062,0.004947456198212451,0.004887148142534567,0.005675874925556355,0.005556855410814705,0.003957356797929973,0.002720767918904849,0.002562838950713243,0.002857184319407774,0.004636611357259807,0.00579563428077999,0.005713996936577274,0.004950106510113211,0.004647871274269581,0.002900832699804149,0.00217660348397555,0.003109170059927191,0.004101425884238747,0.005208933725806866,0.00538628195544888,0.005564608910372699,0.005442481898230069,0.003267092452792557,0.001604579324471494,0.003286789820391274,0.00425918828840376,0.005596326305555342,0.004962253503721641,0.006079855601471547,0.004789471624973877,0.003688147221315437,0.001782050318784252,0.003414385019932325,0.004393449616086053,0.004932294587561011,0.006015481569466849,0.006086928205342638,0.004531905020695134,0.003004865919957525,0.001706714993005626,0.002933702630586362,0.003601122208279674,0.004629894884099671,0.00588601894110369,0.005881419574708504,0.004302591817790973,0.002820070317381048],[0.004085690572802518,0.007042891765205769,0.009114508576442042,0.01075639025628017,0.009242627569674054,0.01085198965183364,0.0170451180401986,0.01428719179673857,0.003402104931031599,0.005534654976514697,0.006131555226551759,0.008632440715439416,0.009124358981351704,0.008244058953162794,0.007671592567744768,0.007400986963000167,0.002694421618559746,0.004437131700943142,0.006089308916840736,0.006237364154657111,0.005946527008414138,0.007689303191008856,0.004907951841005745,0.004472135008909279,0.00267916872223226,0.004015542681323809,0.00576623286364505,0.005294303737279626,0.005364967874369264,0.007247049998510372,0.004982826483479815,0.003436832151006554,0.002313181564396033,0.003572715832602887,0.004993167235204566,0.004821295096152371,0.005763722664203148,0.005717820053612359,0.004212350006886591,0.003166793507828388,0.002654912135204954,0.002883169924131702,0.004845865624584768,0.005701716086603715,0.005831720824341117,0.005142693834268046,0.004962866119830772,0.003140368319611291,0.002171369651275717,0.003315998794176071,0.004221246819678014,0.005430051114140905,0.005688802370591261,0.00579447415279916,0.005486722463437651,0.003521837989887137,0.001589283841525562,0.003403488084916004,0.004266106385822697,0.005663185450978432,0.005042218675247354,0.006154006913634959,0.005136476069711699,0.003697199531677786,0.001788701070563113,0.003467688239523526,0.004507325924709257,0.005006165132822369,0.006037493987100763,0.006044490920903021,0.004738524438382532,0.003249286164140242,0.001786170776203717,0.00300747542679478,0.00358357292602579,0.004615457598793926,0.005850960924949218,0.006361929381338776,0.004405756965362532,0.003058872377791553],[0.004745258641175997,0.008005338797361091,0.01084366786446634,0.01244680118279332,0.01157681478954714,0.01778669907421561,0.01977439985958694,0.01805015236458796,0.00379884685129774,0.006129880400890634,0.008299330087865502,0.01116647642583206,0.01112982759268613,0.009707289984802778,0.01043375609477882,0.008980544130591401,0.002950403577606183,0.005183088492428598,0.008219678546672759,0.00725160177073833,0.008221398707764473,0.01066208320146848,0.006732552478656615,0.0061632984714485,0.00315560074355102,0.005041341834778784,0.006435804556649536,0.007338079245368424,0.008281242341916826,0.009428283065258379,0.006935695612368411,0.005939983304494853,0.002953364351099699,0.004265991506916509,0.005439389007322022,0.007185190057594588,0.007002876354041798,0.00782878147609318,0.006241291705748866,0.004170339803226096,0.003134078380071869,0.003785682961244847,0.005440994766644884,0.006419496218628059,0.007384516558044753,0.007058944434915978,0.006082232359191626,0.003896350086324242,0.002479863281203028,0.004480636387059764,0.005463812652540898,0.007087905343745472,0.007479682930751334,0.007242455099776264,0.006667855537592107,0.004842611064817091,0.001905303256071062,0.004090173206638132,0.005362126000060397,0.007238479929899483,0.006899097309208187,0.007725755294180175,0.006881894292744094,0.0053403871773,0.002163113285211199,0.004134074677784798,0.005947837455344645,0.006566487837827971,0.007279694433911384,0.007384008210765679,0.006077157146052218,0.004639764535358364,0.002149886739804194,0.003313875296439703,0.00465179930031804,0.005669177326223166,0.007609608935637804,0.007495310139469379,0.006384061222223823,0.004715413322949537],[0.002467641150074847,0.004373593350474832,0.007617361608642043,0.00815470216513621,0.01135685602203685,0.008772954987425544,0.007854543010233717,0.004342821763523893,0.002337814814660753,0.005998602026909296,0.007291769081107262,0.009387919746949556,0.01087445853382489,0.00944345775650288,0.007738073253899993,0.004692861312078545,0.00276301762053726,0.005129991786533277,0.008177198364246329,0.00871168504822927,0.008974533695517376,0.01008430748838366,0.007036546482923055,0.005038869591384961,0.003118424152057432,0.004818970779063067,0.008573529117129049,0.009448072494598708,0.00930525980187921,0.009877920650014955,0.008350348544675625,0.004984016825693208,0.002758974928952303,0.005044190397165495,0.007840326446010732,0.009260125494190287,0.01071947885930342,0.01010004494630283,0.007825253489697761,0.004717604878743573,0.003093527458197307,0.004973259929435815,0.008200297980753687,0.009219972134215508,0.0111439339910703,0.009965701970061783,0.007692278735208963,0.004982583753182429,0.002900405546742012,0.005142463822210643,0.007900212964394623,0.009568779315767616,0.009505373198495535,0.009679914808933553,0.007508659853078729,0.005073268573194292,0.002484245200678839,0.005035996197085356,0.007493435786027983,0.009865635877784343,0.01046230537411356,0.009821872381845466,0.007234640171819858,0.005163465850549787,0.002668712942398793,0.005487665241123468,0.007381069292350951,0.008624275363185462,0.01006843440659346,0.01030398978047409,0.008039117785717314,0.005086194957124956,0.002756508737706993,0.005122478550604037,0.00687846954224602,0.008835913896614473,0.01003280978880749,0.009699431757579393,0.007805304431366143,0.004664683979373232],[0.002316174070826353,0.004792063421970917,0.008005828434216003,0.01025187532076105,0.01187593995767919,0.01056417110531717,0.01303146231931811,0.008766613955867968,0.002325851022250576,0.006194283839812685,0.00757446540509461,0.0104568197869019,0.01151738351998131,0.01029943125125467,0.008980828884825688,0.006299682754121136,0.002913703991026799,0.005204389918389779,0.008368476210680962,0.009281364268180098,0.009568373777580548,0.0112142058116115,0.007758740699114616,0.005884019086911017,0.003154509067250817,0.005099988906693805,0.008739768720757903,0.00963014239862117,0.00985662183382963,0.01063041317752144,0.008972743780771793,0.005497459168080955,0.002785413400063523,0.005101768595101281,0.007990676741955624,0.009338913664978601,0.01091899841770716,0.01041907910383087,0.008321702156717894,0.005272325210807637,0.00320895011013409,0.004995899304788315,0.008303878643869009,0.009284197782964323,0.0115390105785366,0.01032963700353455,0.008142644238550822,0.005517958400649919,0.002905468021176555,0.005262151980699532,0.007992761531675883,0.009815045554888803,0.0099729813659404,0.009977635480740349,0.007634763049255232,0.005460492036206304,0.002533041240179698,0.005112773664636088,0.007658503014973879,0.009977292455800041,0.01058327511029507,0.01002236111556509,0.007638298638883081,0.005518325725349126,0.002655595846280437,0.005576636185601423,0.007538514782229708,0.008756706523477127,0.0102656675534177,0.01062645706112074,0.008459085578136061,0.005362201279206508,0.002824515870494902,0.005215806528127296,0.007012466737523997,0.008936877297132715,0.01005491858693244,0.01018194598859927,0.008079533511978135,0.004957121237988828],[0.003167067512174562,0.005403789510855002,0.009882261571447502,0.01325863387589421,0.01576602308984622,0.01464486925494416,0.01709914953186653,0.01188547486640259,0.002906890846025245,0.007694963752034577,0.01016402325080403,0.01465525651480848,0.01510786533920325,0.01290366393673329,0.01203604552812217,0.008837662386523415,0.003643292340387259,0.006469924570368049,0.0108346191724588,0.01182598612572546,0.01291976250123907,0.01566222173963737,0.01095850598137979,0.00857427353306694,0.003855497973779155,0.006259126448918369,0.01068080183024789,0.01349404678472572,0.01385778567291183,0.01455784635528671,0.01184318536833878,0.008286900505783141,0.003499706870896837,0.00647992201244886,0.01013887722735516,0.01225502614492644,0.01483555947971614,0.01440689786264793,0.011987032202494,0.007377815500130291,0.004093723196942791,0.006404895576272505,0.01023231704122166,0.01209763726014601,0.01509249987188559,0.01351402095933357,0.01119479525077252,0.008090302933796124,0.003431974792576017,0.006816549705704593,0.01026512719018415,0.01285626472547336,0.0138074170623075,0.01292790837567386,0.0108008005719306,0.007595531273225211,0.003180899849013583,0.006403778454651981,0.009918345752301359,0.01318293797191182,0.01424816568928122,0.01317045455694216,0.0103333099381554,0.007831245896973527,0.003285980447112278,0.006707540994107657,0.01025111565520379,0.01166137578139785,0.0133474579375575,0.01362071133902511,0.01126696257996472,0.007420520362050841,0.003555422661184686,0.00649626661210342,0.008943391413319519,0.01136926484022826,0.01331931733153923,0.01309537265820592,0.01176455511233944,0.007643638777976154]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>n_obs<\\/th>\\n      <th>cens_prop<\\/th>\\n      <th>km_cor<\\/th>\\n      <th>cox_cor<\\/th>\\n      <th>aft_cor<\\/th>\\n      <th>km_diff_mean<\\/th>\\n      <th>cox_diff_mean<\\/th>\\n      <th>aft_diff_mean<\\/th>\\n      <th>km_diff_sd<\\/th>\\n      <th>cox_diff_sd<\\/th>\\n      <th>aft_diff_sd<\\/th>\\n      <th>km_rmse<\\/th>\\n      <th>cox_rmse<\\/th>\\n      <th>aft_rmse<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":10,\"searching\":true,\"columnDefs\":[{\"targets\":1,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 1, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":2,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":3,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":4,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":5,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":6,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":7,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":8,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":9,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":10,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":11,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":12,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":13,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"className\":\"dt-right\",\"targets\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13]},{\"name\":\"n_obs\",\"targets\":0},{\"name\":\"cens_prop\",\"targets\":1},{\"name\":\"km_cor\",\"targets\":2},{\"name\":\"cox_cor\",\"targets\":3},{\"name\":\"aft_cor\",\"targets\":4},{\"name\":\"km_diff_mean\",\"targets\":5},{\"name\":\"cox_diff_mean\",\"targets\":6},{\"name\":\"aft_diff_mean\",\"targets\":7},{\"name\":\"km_diff_sd\",\"targets\":8},{\"name\":\"cox_diff_sd\",\"targets\":9},{\"name\":\"aft_diff_sd\",\"targets\":10},{\"name\":\"km_rmse\",\"targets\":11},{\"name\":\"cox_rmse\",\"targets\":12},{\"name\":\"aft_rmse\",\"targets\":13}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[\"options.columnDefs.0.render\",\"options.columnDefs.1.render\",\"options.columnDefs.2.render\",\"options.columnDefs.3.render\",\"options.columnDefs.4.render\",\"options.columnDefs.5.render\",\"options.columnDefs.6.render\",\"options.columnDefs.7.render\",\"options.columnDefs.8.render\",\"options.columnDefs.9.render\",\"options.columnDefs.10.render\",\"options.columnDefs.11.render\",\"options.columnDefs.12.render\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nVisualizing the RMSE between RISBS and ISBS:\n\n::: {.panel-tabset}\n#### Cox\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncox_mat = \n  res_ph_ind |> \n  select(n_obs, cens_prop, cox_rmse) |> \n  pivot_wider(names_from = cens_prop, values_from = cox_rmse) |> \n  arrange(desc(n_obs)) |>\n  column_to_rownames(var = \"n_obs\") |> \n  as.matrix()\n\n# color function\nmax_val = round(max(c(res_ph_ind$km_rmse, res_ph_ind$cox_rmse, res_ph_ind$aft_rmse)), digits = 3) + 0.001\ncol_fun = circlize::colorRamp2(c(0, max_val/2, max_val), c(\"#e0f3db\", \"#a8ddb5\", \"#43a2ca\"))\n\nHeatmap(cox_mat, name = \"RMSE\", cluster_rows = FALSE, cluster_columns = FALSE,\n        column_title = \"Censoring Proportion\", column_title_side = \"bottom\",\n        column_labels = paste0(seq(from = 10, to = 80, by = 10), \"%\"),\n        column_names_rot = 0, column_names_centered = TRUE,\n        row_names_side = \"left\", row_title = \"#Observations\", col = col_fun)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n#### AFT\n\n::: {.cell}\n\n```{.r .cell-code}\naft_mat = \n  res_ph_ind |> \n  select(n_obs, cens_prop, aft_rmse) |> \n  pivot_wider(names_from = cens_prop, values_from = aft_rmse) |> \n  arrange(desc(n_obs)) |>\n  column_to_rownames(var = \"n_obs\") |> \n  as.matrix()\n\nHeatmap(aft_mat, name = \"RMSE\", cluster_rows = FALSE, cluster_columns = FALSE,\n        column_title = \"Censoring Proportion\", column_title_side = \"bottom\",\n        column_labels = paste0(seq(from = 10, to = 80, by = 10), \"%\"),\n        column_names_rot = 0, column_names_centered = TRUE, col = col_fun,\n        row_names_side = \"left\", row_title = \"#Observations\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n#### Kaplan-Meier\n\n::: {.cell}\n\n```{.r .cell-code}\nkm_mat = \n  res_ph_ind |> \n  select(n_obs, cens_prop, km_rmse) |> \n  pivot_wider(names_from = cens_prop, values_from = km_rmse) |> \n  arrange(desc(n_obs)) |>\n  column_to_rownames(var = \"n_obs\") |> \n  as.matrix()\n\nHeatmap(km_mat, name = \"RMSE\", cluster_rows = FALSE, cluster_columns = FALSE,\n        column_title = \"Censoring Proportion\", column_title_side = \"bottom\",\n        column_labels = paste0(seq(from = 10, to = 80, by = 10), \"%\"),\n        column_names_rot = 0, column_names_centered = TRUE, col = col_fun,\n        row_names_side = \"left\", row_title = \"#Observations\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n:::\n\n### Prop. Hazards and Dependent Censoring {-}\n\nFor each combo of number of observations (`n_obs`) and proportion of censoring (`cens_prop`) variables ($100$ simulated datasets per combo), we calculate the following summary stats: **Pearson correlation**, **mean absolute difference** and its standard deviation, **root mean square error (RMSE)**:\n\n::: {.cell}\n\n```{.r .cell-code}\nres_ph_dep = \n  res |> \n  drop_na() |> # exclude few datasets where AFT prediction didn't work\n  filter(prop_haz == TRUE, cens_dep == TRUE) |>\n  group_by(n_obs, cens_prop) |>\n  summarize(\n    .groups = \"drop\",\n    km_cor  = cor(km_proper, km_improper),\n    cox_cor = cor(cox_proper, cox_improper),\n    aft_cor = cor(aft_proper, aft_improper),\n    km_diff_mean  = mean(abs(km_proper - km_improper)),\n    cox_diff_mean = mean(abs(cox_proper - cox_improper)),\n    aft_diff_mean = mean(abs(aft_proper - aft_improper)),\n    km_diff_sd    = sd(abs(km_proper - km_improper)),\n    cox_diff_sd   = sd(abs(cox_proper - cox_improper)),\n    aft_diff_sd   = sd(abs(aft_proper - aft_improper)),\n    km_rmse  = sqrt(mean(km_proper - km_improper)^2),\n    cox_rmse = sqrt(mean(cox_proper - cox_improper)^2),\n    aft_rmse = sqrt(mean(aft_proper - aft_improper)^2),\n)\n\nres_ph_dep |>\n  datatable(\n    rownames = FALSE,\n    options = list(pageLength = 10, searching = TRUE)) |>\n  formatRound(columns = 2:14, digits = c(1, rep(2,3), rep(3,9)))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-97e8e751506a6f39f506\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-97e8e751506a6f39f506\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[100,100,100,100,100,100,100,100,200,200,200,200,200,200,200,200,300,300,300,300,300,300,300,300,400,400,400,400,400,400,400,400,500,500,500,500,500,500,500,500,600,600,600,600,600,600,600,600,700,700,700,700,700,700,700,700,800,800,800,800,800,800,800,800,900,900,900,900,900,900,900,900,1000,1000,1000,1000,1000,1000,1000,1000],[0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7000000000000001,0.8],[0.9927601750006627,0.9831229215941519,0.9793435911107059,0.984158524527677,0.9848236280629284,0.9879718100412721,0.9915653081079336,0.9985855851061601,0.9961093398077434,0.9946402983025784,0.9896212790953396,0.9794097897333899,0.9844582301895685,0.9922335731668419,0.9942668002733225,0.9974905658407256,0.9973383180822122,0.9976734574993927,0.9918145835488962,0.9932487340680908,0.9864868650255718,0.9927248029346394,0.9951641761942255,0.9972560664450598,0.9979959162462102,0.9962634515582881,0.9966120608406503,0.9892134590713444,0.9788699934940615,0.9899076791210576,0.9926133011113247,0.9972824267888507,0.9985611114061806,0.9927326311017151,0.9944310059602611,0.9906377627721902,0.9935700768445145,0.9929499058667542,0.995066732141032,0.9980836304383883,0.9983657465795722,0.9947686305811212,0.9913956703888627,0.9910751771597688,0.9897261536536166,0.9898833033024298,0.9939464168111202,0.9970791520102602,0.9985604088453226,0.9966992253363397,0.9927226134979115,0.9913466747120544,0.9888962656050999,0.9881946591027119,0.9943155105122417,0.9974346968545442,0.9989762762937396,0.9984002420801016,0.9942718830398949,0.9907075509236718,0.9902199633005788,0.9909442446637901,0.9930080622506324,0.9973061109495184,0.9990545877352657,0.9974558523801146,0.9950980676580448,0.9927685821342752,0.9909469732225089,0.9896695911148854,0.9929829106455895,0.9974861351564656,0.9993744514992372,0.9976916393257408,0.9947773350017488,0.9915999271634863,0.9932930626113564,0.9910765032844184,0.9927895497808846,0.9967997141509243],[0.9918197051697791,0.9851329712058279,0.9908839018977059,0.9853955625153445,0.9697214956465876,0.9697230724650879,0.982236138363924,0.9687423717214434,0.9966745665250913,0.9969475751018442,0.9935215573735459,0.9848376576921236,0.9854124866030388,0.9822111833894022,0.9763393414464547,0.9727158219395989,0.9979192169628809,0.998181508808109,0.9938080343280588,0.9941370493457641,0.9887801115775663,0.988014114662303,0.9748903238118273,0.98200672533815,0.9986961377484935,0.997756898507844,0.9972132260616318,0.9931944542432073,0.9838808164996515,0.9883979552646099,0.9885032473506405,0.9839535609409286,0.998807482103351,0.9949097653485118,0.9959450440746401,0.9958127818805858,0.9924551804671797,0.9876709754661155,0.9876012742420294,0.9783539789315773,0.9989131191327537,0.9966191326027245,0.9941981056070761,0.9945829330946013,0.9888880188827226,0.9872112916823592,0.9846388633062365,0.9904139719980043,0.9986330491553234,0.9975349588630907,0.9930310363339638,0.9919027225902499,0.9930198661195988,0.9894343889410566,0.9929166101277023,0.9953109367380765,0.9992864524067531,0.998893617342163,0.9968896742761465,0.9944545431076776,0.9895986943397321,0.9914813934850731,0.9914603014360929,0.9904014093639468,0.9991777036423115,0.9984727340226737,0.9981170471115035,0.9962296080596678,0.9931833130663636,0.9845205863559974,0.9896535407660816,0.9899889045823179,0.9994123370936395,0.9986036916084189,0.9953811376121646,0.9936531074710481,0.9950574375798907,0.9919862341803311,0.9872552124761624,0.9936566989526937],[0.9914130709555201,0.9738739105400659,0.9865228449669785,0.97442508887026,0.9625277778587734,0.9540317003678773,0.9677077029115108,0.8533766255814884,0.9960511393845463,0.9948173269322821,0.9890216087222304,0.9785359912903275,0.9656012689881472,0.9659434727909058,0.9623064496565176,0.9757045184318344,0.9958034971585373,0.9942347623794068,0.9832457675859466,0.9860521143192398,0.9765507507514237,0.9834350327960665,0.9696795616407278,0.9719649642801219,0.9970001712850491,0.9943883097510736,0.9932008680099237,0.9869591891830188,0.9781062696005447,0.9741282419976482,0.9751909475529961,0.9735988394235572,0.9975960156900846,0.9868894506100375,0.9908557193792591,0.9887842151460213,0.98830466004893,0.9770760137078295,0.981116752511192,0.9695677332589701,0.9976989557541667,0.9931162900996172,0.987473412037154,0.9836585108233502,0.9821003788399004,0.980744463535975,0.973300597935683,0.980217002442024,0.9976958267925031,0.9942237887175682,0.9844557905446365,0.9849987552046008,0.9842217916940295,0.9781062730914251,0.9874067584764596,0.9912066397182693,0.9981560779228427,0.9968326569563895,0.9926979168736869,0.9874797147091084,0.9786027553682726,0.9859085090500289,0.9829495584962578,0.9814272521578841,0.9986360655351892,0.9970201469912364,0.9953140737123654,0.992047071549384,0.984148959660214,0.970073257441011,0.9801623353781578,0.9775027224731008,0.998940014872868,0.9962635298050887,0.9889082793141623,0.9855248849984607,0.990841100323775,0.9873932558742333,0.9774585533647487,0.9869933504246289],[0.003982148291601775,0.007052506075407228,0.008928248440948137,0.01028788878704373,0.009421041920804629,0.009634131340562136,0.007425431273593328,0.004460795907358814,0.003324253132993949,0.005209280906381581,0.008165268680161297,0.008814070794246294,0.01042713159054279,0.009820006183484647,0.006853984314780452,0.004760652414119578,0.003279206517504428,0.005420492363198338,0.007268500156441485,0.008490348420375262,0.01045397253540479,0.008652042201567241,0.007351759732298699,0.004905653803517744,0.002533268956355133,0.004989990641212755,0.007337644413979323,0.008985397247265629,0.01081027803415538,0.009763574350148841,0.00822194554842978,0.00487791421643958,0.002810788979454411,0.005893338556030542,0.007046427449390069,0.008963461209641916,0.009724628246741959,0.009963313678458621,0.007152867296770027,0.004898012551244388,0.003094853767454915,0.005844065259640719,0.007899567929991405,0.009200324064713187,0.0110324263361822,0.01017415421509888,0.008308261587347666,0.005048570492997159,0.002818684581353552,0.00552970241415537,0.007466611509060032,0.009987510380364734,0.00993874657007288,0.009726222894536578,0.008000648190326668,0.004612256927331216,0.0028314714916001,0.005322937525919038,0.008156779284508215,0.009544947745148661,0.01026866200453077,0.009389741758479427,0.008472966423007412,0.00510471695377566,0.002778546736083127,0.005661022133189259,0.007403074060929661,0.009318031561303852,0.01071194280203235,0.009738362343627575,0.008483729969930937,0.00472380895247044,0.002864616779605411,0.005485178238683472,0.007854293594432359,0.01015862666695047,0.009381315217954822,0.009902949368136505,0.00797337493165059,0.005580256061621358],[0.003305250038951888,0.005520787736121903,0.0049197721284375,0.006531371039815586,0.007151146305866325,0.007423748280078438,0.005816998040947536,0.007165085626485287,0.002451293819889657,0.002862447300581779,0.003717298960153419,0.004262528553869248,0.004591152229554607,0.005438553709620876,0.005389260505979345,0.005201760420299266,0.002296504124224702,0.002799740209057367,0.003535462251194212,0.003508733555559663,0.004301510810083571,0.003855211369508144,0.004362822930443037,0.003865480948974381,0.001680545308091371,0.002569893370324908,0.003073277312241111,0.003087307407357479,0.004443649219746466,0.004012715239536515,0.003698859102826458,0.003553987888288138,0.001878656004701718,0.002920663343806451,0.002807784620349146,0.003110432889218979,0.00320234067638451,0.004242312489659832,0.003257737147220662,0.00388719611423984,0.002050963468496994,0.002873109118013135,0.003302150230997013,0.003021432736199969,0.004349763377708101,0.003859885378807198,0.003898822375782078,0.002813605616215723,0.001888262408367644,0.002775722292272865,0.00340654252177911,0.003982348967707207,0.003499132715114707,0.003943687480433542,0.003187546966264631,0.002210621476199552,0.001914216194985985,0.002411690277504439,0.00296780135442943,0.003162970771563823,0.00358426297818087,0.003415835678845618,0.00348795877586984,0.002714597636188897,0.001735423137372758,0.002513582722116115,0.00245570665544668,0.003266568411786962,0.003381632258550372,0.003553380764677105,0.003314862676160804,0.002643232399582583,0.001829097753416858,0.002526394304350341,0.002966879083607723,0.003791233627940875,0.002684746099058175,0.003249935236129774,0.003592017866656526,0.002360247314043053],[0.003553454195838118,0.006879276715868759,0.005832008136113881,0.008205589782048939,0.008301520258273841,0.009011513617737974,0.007895670012665676,0.01191664183585007,0.002870221854774633,0.004022687528155194,0.004785443770639291,0.005591331425489816,0.006112487444455792,0.007215746051939888,0.006534995947014417,0.005427678510723209,0.002910330139645935,0.00394263810144354,0.004880808490169719,0.00477061263972941,0.005395316461198708,0.004882669977620191,0.005594829662038939,0.00489398751470661,0.002169505023739353,0.003447973280914203,0.004410940617339818,0.004054664514331182,0.005435951225911718,0.005527345186198736,0.004769460160820113,0.004518132271125123,0.002461422547752743,0.003999221561760366,0.003879215935987412,0.004298557031249582,0.004316217266002466,0.005544319040441136,0.00403738819683145,0.004814332314629986,0.002602887938119622,0.00372198171134987,0.004607381101986728,0.004400069546258992,0.005592819532463774,0.004818108314220803,0.004936628179087955,0.003829663570929625,0.002361768352560559,0.003742522885405719,0.004608675445242896,0.004929541770999921,0.004574896753323268,0.005322233650559889,0.004290992696677686,0.002926350942173437,0.002602893492597957,0.003458816392833923,0.003890098674492263,0.004100636950378031,0.004880626460727668,0.004554867048368136,0.005026860869367922,0.003637003265022173,0.002151547091844171,0.003261373771787993,0.003282573451453162,0.004169625562693591,0.004976090099038008,0.004782719312439589,0.004366933386392267,0.00378254262308285,0.002338869643082814,0.00351369118933653,0.004011351225840734,0.005040965308348954,0.003676849898909789,0.004125981305611117,0.004876608815758881,0.00318292312607652],[0.005434610993048943,0.00705945059223631,0.008409103191613792,0.007701166380708289,0.007737833303085354,0.007540041189400343,0.006449820654915586,0.003100128667332492,0.003194249942535108,0.0040896347382503,0.00567548599242519,0.006301005076873266,0.006768665556926554,0.005685685368414548,0.004271813025325398,0.003020886177795642,0.003022989935002849,0.003526801068679923,0.005046623554257294,0.005126743018076822,0.006854403299224007,0.005305537443472175,0.004287950591066462,0.002689777287928624,0.002331076607239745,0.003775045033512951,0.003838191189279344,0.005107651925874991,0.008033744138371924,0.006252959896018964,0.005059961426523868,0.003311680597434274,0.002067326178246214,0.003795879396660418,0.004018631758673764,0.005670727539308558,0.005065158595921523,0.005642906882084267,0.003991793487744612,0.002784143152265398,0.00235003313770186,0.004145704029069089,0.004724818977784991,0.005102299125363631,0.005944370619972428,0.00616807845414094,0.005023388114816429,0.003148612284571972,0.002030881625483982,0.00320077029857397,0.004319083368469338,0.004999975203406022,0.006038506801211919,0.006186763875563443,0.004729082274599957,0.002584021127736097,0.001954978410658645,0.002836640705211196,0.004689780761673693,0.005068756563017069,0.005665042331038699,0.005009060115979047,0.005383466806292227,0.003041489055095746,0.001808149667076844,0.003091105312782037,0.004375729193215014,0.004963184969987599,0.005453846003471381,0.004866633137693639,0.004645058950427987,0.002546825912379483,0.001701137742060015,0.003163518139883204,0.003700581251500251,0.005143873959734425,0.004624373996428937,0.005356780793347169,0.005032872829545538,0.003316820923255583],[0.005352335682534809,0.006338601851964654,0.005384476491565246,0.006408701632909928,0.009803840183594804,0.01074274610042959,0.006839983342591613,0.01269613604102771,0.002976023189131805,0.002598506402671272,0.004216958054212683,0.004580106275327931,0.004578353449833498,0.00518745765394683,0.005845613441826741,0.006838092082550212,0.002546603908213244,0.002613174516641737,0.003446143822873523,0.003291731789283396,0.004707649343165196,0.003883958240743949,0.005758511777777176,0.004159692630175646,0.001690418345942608,0.00253091212019621,0.002841575469886546,0.002889345958415166,0.005002989621592921,0.004301472421425131,0.003401174593845167,0.004254820823856749,0.001845846170507269,0.002537608372662808,0.002687166078596552,0.002661678531122896,0.003433010491941663,0.003924267831279522,0.003698866012989997,0.004938827661839771,0.001770808730763171,0.002989889684445903,0.002884609765187833,0.002585506320167744,0.004572402657024104,0.004060376292638303,0.003878633148038383,0.003167407836298163,0.00178585959559689,0.002296290683911753,0.003172039266370932,0.003426189435299078,0.003576036242987966,0.003680297681264108,0.003225805429713613,0.001831767813292876,0.001559202373433806,0.001990126458777651,0.002795363904347844,0.003100825142180329,0.003535378020373456,0.002962797603044395,0.003177132478148237,0.002547148104370921,0.001562333591022531,0.00209587388704191,0.002324638745629179,0.002735361270342407,0.00306087502755048,0.00369495931120835,0.003005279575601534,0.002528622221033541,0.001549100683422585,0.002214887980534594,0.002696228086234074,0.003357086817197949,0.002376458416662827,0.003124409432265031,0.004234900955240027,0.002066550144384045],[0.004812350884668636,0.008254326776883298,0.006285175776705303,0.007278338993764857,0.01005991647863109,0.01265101547563891,0.008688133087220076,0.03131988820077593,0.003060407577813,0.003415031851887735,0.004863259980462578,0.005308184295944373,0.006226390583259971,0.006587588479828774,0.007183419510275545,0.005911713890778254,0.003111753387990471,0.003436574268026712,0.005233471863392362,0.004729773825114458,0.006814421455159558,0.003977933909897665,0.007286729605219993,0.004961025247852371,0.002315164032312125,0.003469517832389723,0.003928850462227515,0.003448006205929132,0.005568080844498231,0.005471818524006153,0.00468128510741977,0.005247161792626457,0.002222725046321097,0.003688302768592679,0.003622092076198176,0.004007905650437993,0.004323908521710988,0.005059502126848834,0.004083232982265966,0.005693159191739806,0.002238279029899772,0.003487752245257782,0.003901277123084974,0.003475781119289622,0.005344169224929645,0.004207991979860399,0.004926798739737678,0.004386777457120471,0.002044698355746261,0.002936850951815854,0.003939284416273727,0.004167683762433249,0.004325941567616695,0.005015601537018318,0.004189532164952121,0.002718405412159472,0.002027453307405658,0.003116131597906511,0.003449362018711411,0.004120668730844497,0.004202695244179828,0.003446031200008926,0.004103305029319755,0.0032609548999066,0.001851653444275467,0.002476548147402204,0.003010651200642342,0.003396836433830468,0.004216073583218662,0.004486647488258785,0.004050405099826707,0.003426265522671004,0.001768764304599069,0.002851491046095416,0.003549652070732388,0.004359373249199634,0.002863578958854291,0.003709939237173997,0.004969531561827291,0.002959965650597294],[0.003217696013853392,0.00633248646427539,0.00885182708996838,0.01006558627629543,0.009386883067210418,0.009592819221305855,0.007425431273593328,0.004460795907358814,0.00280524964808126,0.005038765159424226,0.008032047941101777,0.008639903513557303,0.01042713159054279,0.009820006183484647,0.006853984314780452,0.004760652414119578,0.00317837475383486,0.005401615287330111,0.007180576786393102,0.008490348420375262,0.01045397253540479,0.008652042201567241,0.007351759732298699,0.004905653803517744,0.002334188420030862,0.004819020509631769,0.007316141601217937,0.008985397247265629,0.01081027803415538,0.009763574350148841,0.00822194554842978,0.00487791421643958,0.002713914083277415,0.005756820853705135,0.007046427449390069,0.008963461209641916,0.009724628246741959,0.009963313678458621,0.007152867296770027,0.004898012551244388,0.002987874731655183,0.005844065259640719,0.007899567929991405,0.009200324064713187,0.0110324263361822,0.01017415421509888,0.008308261587347666,0.005048570492997159,0.002760898824623959,0.005475824772568577,0.007466611509060032,0.009987510380364734,0.00993874657007288,0.009726222894536578,0.008000648190326668,0.004612256927331216,0.002771188128263709,0.005322937525919038,0.008156779284508215,0.009544947745148661,0.01026866200453077,0.009389741758479427,0.008472966423007412,0.00510471695377566,0.002778546736083127,0.005661022133189259,0.007403074060929661,0.009318031561303852,0.01071194280203235,0.009738362343627575,0.008483729969930937,0.00472380895247044,0.002859794849992242,0.005485178238683472,0.007823372559193282,0.01015862666695047,0.009381315217954822,0.009902949368136505,0.00797337493165059,0.005580256061621358],[0.001727170593183101,0.002906658953966921,0.003199561904674483,0.004507305030665769,0.001132691719547039,0.002585902848907232,0.002169475946156343,0.00139518479907979,0.001630221204025477,0.0021652194204782,0.002744742053186364,0.001591622913764178,0.002092465424351834,0.001815445508193855,0.001092333580552031,0.001628503920996801,0.002014711806429035,0.002342113037331619,0.002460714107791358,0.001665374502193674,0.002725071701711101,0.001178724559837288,0.0002108635937084087,0.001408562349035609,0.001199640507124514,0.001920745000835487,0.002550329968577693,0.001949229030074323,0.002634543975397797,0.002246698067309854,0.001533300227007049,0.001178930853373822,0.00171461895494296,0.002108175410135354,0.002154378202889142,0.00213867496483069,0.001479027225604551,0.001719395569687096,0.001060579784512224,0.001760399771694363,0.001809458221151867,0.002653716435653047,0.002591153061970692,0.001812220384889822,0.003400679820307951,0.001698482575139871,0.0009780548530287042,0.001535145015403266,0.001641818535957669,0.002377524507630106,0.002434029969261447,0.002600168735609453,0.002037364431921802,0.002854190803759724,0.001871253001440786,0.001581536315357285,0.00176600248456965,0.002226742753226716,0.002461345689361334,0.002511786566872657,0.002065548840663727,0.002178475807532499,0.002099888347494506,0.000766710578819683,0.001624426689809641,0.002303569830706021,0.002217055679712869,0.002625716095583085,0.002276556953859576,0.001641487321313247,0.001832084742352585,0.0008136797738391887,0.001742854081077101,0.002372749239919607,0.002164927177280783,0.003049362308050736,0.00153745169209621,0.002030148790628864,0.001795752189833658,0.001032875207194197],[0.002011777331708799,0.003632281792530757,0.00430988058841599,0.005701657612856676,0.002330665521376093,0.004014276811883084,0.004077299387412425,0.004143594393221079,0.002012208541563593,0.003119567063035016,0.003656374562295878,0.002947428464038075,0.003460819979454136,0.003454047820174398,0.001775709298862972,0.002094090804686187,0.002657055831214844,0.003478384586699238,0.003645724068708624,0.002695028846633027,0.004047375879699213,0.00192038345393723,0.001293188476616517,0.002349175541920946,0.001606008237548055,0.00263248936488074,0.003848329013723183,0.002915920749134199,0.003793246190444915,0.003215517600818452,0.00190982144710226,0.001939362417736804,0.002255673885935327,0.003210180333824337,0.003010384580810882,0.00328004715563203,0.00251520190572528,0.002714047594843434,0.001813500529210202,0.003014382163513639,0.002335176643667619,0.003524598302552038,0.003921720531338772,0.003058063403283432,0.004721429519087406,0.0025227240569318,0.00199621407891863,0.00226979303800913,0.002118787298965056,0.003350578271666558,0.003425305719507053,0.003513039728062081,0.003299358201069424,0.004101667588958736,0.003058779145105,0.002497612231346905,0.002407360836207673,0.003307323683460603,0.003354135092588463,0.003503075660296202,0.003157754065357656,0.003218710654559634,0.003574810376190926,0.001555759470088468,0.002070504834469943,0.003041839594045264,0.002995990458618435,0.003574877119438938,0.003831272444684593,0.002970011620169306,0.002697593296309422,0.001611159508799243,0.002219372886096822,0.003332754342123871,0.003122167277168198,0.00427798342039623,0.002612560574525006,0.002965619245108166,0.002905902973329492,0.001770668960381121]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>n_obs<\\/th>\\n      <th>cens_prop<\\/th>\\n      <th>km_cor<\\/th>\\n      <th>cox_cor<\\/th>\\n      <th>aft_cor<\\/th>\\n      <th>km_diff_mean<\\/th>\\n      <th>cox_diff_mean<\\/th>\\n      <th>aft_diff_mean<\\/th>\\n      <th>km_diff_sd<\\/th>\\n      <th>cox_diff_sd<\\/th>\\n      <th>aft_diff_sd<\\/th>\\n      <th>km_rmse<\\/th>\\n      <th>cox_rmse<\\/th>\\n      <th>aft_rmse<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":10,\"searching\":true,\"columnDefs\":[{\"targets\":1,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 1, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":2,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":3,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":4,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":5,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":6,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":7,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":8,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":9,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":10,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":11,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":12,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":13,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"className\":\"dt-right\",\"targets\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13]},{\"name\":\"n_obs\",\"targets\":0},{\"name\":\"cens_prop\",\"targets\":1},{\"name\":\"km_cor\",\"targets\":2},{\"name\":\"cox_cor\",\"targets\":3},{\"name\":\"aft_cor\",\"targets\":4},{\"name\":\"km_diff_mean\",\"targets\":5},{\"name\":\"cox_diff_mean\",\"targets\":6},{\"name\":\"aft_diff_mean\",\"targets\":7},{\"name\":\"km_diff_sd\",\"targets\":8},{\"name\":\"cox_diff_sd\",\"targets\":9},{\"name\":\"aft_diff_sd\",\"targets\":10},{\"name\":\"km_rmse\",\"targets\":11},{\"name\":\"cox_rmse\",\"targets\":12},{\"name\":\"aft_rmse\",\"targets\":13}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[\"options.columnDefs.0.render\",\"options.columnDefs.1.render\",\"options.columnDefs.2.render\",\"options.columnDefs.3.render\",\"options.columnDefs.4.render\",\"options.columnDefs.5.render\",\"options.columnDefs.6.render\",\"options.columnDefs.7.render\",\"options.columnDefs.8.render\",\"options.columnDefs.9.render\",\"options.columnDefs.10.render\",\"options.columnDefs.11.render\",\"options.columnDefs.12.render\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nVisualizing the RMSE between RISBS and ISBS:\n\n::: {.panel-tabset}\n#### Cox\n\n::: {.cell}\n\n```{.r .cell-code}\ncox_mat = \n  res_ph_dep |> \n  select(n_obs, cens_prop, cox_rmse) |> \n  pivot_wider(names_from = cens_prop, values_from = cox_rmse) |> \n  arrange(desc(n_obs)) |>\n  column_to_rownames(var = \"n_obs\") |> \n  as.matrix()\n\n# color function\nmax_val = round(max(c(res_ph_dep$km_rmse, res_ph_dep$cox_rmse, res_ph_dep$aft_rmse)), digits = 3) + 0.001\ncol_fun = circlize::colorRamp2(c(0, max_val/2, max_val), c(\"#e0f3db\", \"#a8ddb5\", \"#43a2ca\"))\n\nHeatmap(cox_mat, name = \"RMSE\", cluster_rows = FALSE, cluster_columns = FALSE,\n        column_title = \"Censoring Proportion\", column_title_side = \"bottom\",\n        column_labels = paste0(seq(from = 10, to = 80, by = 10), \"%\"),\n        column_names_rot = 0, column_names_centered = TRUE, col = col_fun,\n        row_names_side = \"left\", row_title = \"#Observations\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n#### AFT\n\n::: {.cell}\n\n```{.r .cell-code}\naft_mat = \n  res_ph_dep |> \n  select(n_obs, cens_prop, aft_rmse) |> \n  pivot_wider(names_from = cens_prop, values_from = aft_rmse) |> \n  arrange(desc(n_obs)) |>\n  column_to_rownames(var = \"n_obs\") |> \n  as.matrix()\n\nHeatmap(aft_mat, name = \"RMSE\", cluster_rows = FALSE, cluster_columns = FALSE,\n        column_title = \"Censoring Proportion\", column_title_side = \"bottom\",\n        column_labels = paste0(seq(from = 10, to = 80, by = 10), \"%\"),\n        column_names_rot = 0, column_names_centered = TRUE, col = col_fun,\n        row_names_side = \"left\", row_title = \"#Observations\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n#### Kaplan-Meier\n\n::: {.cell}\n\n```{.r .cell-code}\nkm_mat = \n  res_ph_dep |> \n  select(n_obs, cens_prop, km_rmse) |> \n  pivot_wider(names_from = cens_prop, values_from = km_rmse) |> \n  arrange(desc(n_obs)) |>\n  column_to_rownames(var = \"n_obs\") |> \n  as.matrix()\n\nHeatmap(km_mat, name = \"RMSE\", cluster_rows = FALSE, cluster_columns = FALSE,\n        column_title = \"Censoring Proportion\", column_title_side = \"bottom\",\n        column_labels = paste0(seq(from = 10, to = 80, by = 10), \"%\"),\n        column_names_rot = 0, column_names_centered = TRUE, col = col_fun,\n        row_names_side = \"left\", row_title = \"#Observations\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n:::\n\n## Real-world Data Results {-}\n\n:::{.callout-note}\n- [Compressed data files](https://github.com/bblodfon/scoring-rules-2024/tree/main/data)\n- [R script](https://github.com/bblodfon/scoring-rules-2024/blob/main/prepare_tasks.R) used to translate the datasets into `mlr3` tasks and extract useful info, namely:\n  - `n_obs`: Number of observations\n  - `n_vars`: Number of total variables\n  - `n_factors`: Number of factor/categorical variables\n  - `n_numeric`: Number of numeric variables\n  - `cens_prop`: Proportion of censoring\n  - `admin_cens_prop`: Proportion of censored observations that are censored administratively, i.e. at the last censoring time\n  - `dep_cens_prop`: Proportion of significant coefficients (adjusted `p < 0.05`) to predict censoring status using a logistic regression model\n  - `prop_haz`: If the dataset satisfies the proportional hazards assumption (`p > 0.05` using a global Schoenfeld test)\n- [R script](https://github.com/bblodfon/scoring-rules-2024/blob/main/run_bench.R) used to run the benchmark\n:::\n\n### Introduction {-}\n\nWe used a total of $26$ real-word, low-dimensional datasets (fewer features than observations) for benchmarking, some of which are freely available via various `R` packages.\nFor each dataset, we performed a simple train/test resampling (80%/20%) $100$ times.\nEach resampling was stratified using the `status` variable so that the proportion of censoring remains the same in each respective train and test set.\n\nWe trained 3 models in each respective train set, namely the **Kaplan-Meier**, the **Cox Proportional Hazards** (CoxPH) model and an **Accelerated Failure Time** (AFT) model with Weibull distribution for the time-to-event output variable.\nWe tested the performance of each model in each respective test set using the **ISBS** and **RISBS** measures, integrating up to the $80\\%$ quantile of the event times of each train set.\nWe kept also the brier scores for each specific observation (*per-observation* scores) in all respective test sets.\n\n### Datasets table {-}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# task info, see `prepare_tasks.R`\ntask_tbl = readRDS(file = \"task_tbl.rds\")\n\ntask_tbl |> \n  select(-task) |>\n  datatable(\n    rownames = FALSE, \n    options = list(pageLength = 13, searching = TRUE,\n                   order = list(list(0, 'asc')))) |>\n    formatRound(columns = 6:8, digits = 2) |>\n    formatStyle(columns = 'prop_haz',\n                backgroundColor = styleEqual(c(TRUE, FALSE), c(\"#4DAF4A\", \"#E41A1C\")))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-f5caa29e3452160ef8e5\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f5caa29e3452160ef8e5\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"aids.id\",\"aids2\",\"channing\",\"colrec\",\"cost\",\"dataFTR\",\"dataSTR\",\"e1684\",\"gbsg\",\"grace\",\"kidtran\",\"liver\",\"lung\",\"metabric\",\"mgus\",\"nafld1\",\"nwtco\",\"ova\",\"rdata\",\"std\",\"support\",\"tumor\",\"uis\",\"veteran\",\"wbc1\",\"whas\"],[467,2814,458,5578,518,2206,546,284,2232,1000,863,488,228,1903,176,4000,4028,358,1040,877,4000,776,575,137,190,481],[5,4,2,5,13,2,4,3,7,6,3,2,8,9,7,5,3,5,3,21,14,7,12,6,2,9],[4,2,0,2,10,0,0,0,0,0,0,0,1,0,1,1,1,3,1,4,0,1,1,3,0,2],[1,2,2,3,3,2,4,3,7,6,3,2,7,9,6,4,2,2,2,17,14,6,11,3,2,7],[0.5974304068522484,0.3841506751954513,0.6157205240174672,0.17497310864109,0.2200772200772201,0.8640072529465095,0.815018315018315,0.3098591549295774,0.432347670250896,0.676,0.8377752027809965,0.4016393442622951,0.2763157894736842,0.4203888596952181,0.0625,0.9195,0.8582423038728898,0.2569832402234637,0.4740384615384615,0.6043329532497149,0.32375,0.5167525773195877,0.1930434782608696,0.06569343065693431,0.4263157894736842,0.4823284823284824],[0.003584229390681004,0.0009250693802035153,0.4397163120567376,0.001024590163934426,0.008771929824561403,0.001049317943336831,0.002247191011235955,0.01136363636363636,0.001036269430051813,0.7248520710059172,0.001383125864453665,0.00510204081632653,0.01587301587301587,0.00125,0.09090909090909091,0.0002718868950516585,0.0002892681515765114,0.0108695652173913,0.002028397565922921,0.001886792452830189,0.002316602316602316,0.002493765586034913,0.009009009009009009,0.1111111111111111,0.01234567901234568,0.004310344827586207],[0.3333333333333333,0,0.6666666666666666,0.8333333333333334,0.1428571428571428,0.6666666666666666,0.6,0.25,0.5,0.7142857142857143,0.5,0.6666666666666666,0.1111111111111111,0.6,0.125,0.3333333333333333,1,0.07692307692307693,0.5714285714285714,0,0.2666666666666667,0.3076923076923077,0.06666666666666667,0,0,0.4666666666666667],[true,false,true,false,false,true,true,true,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,false,true,false]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>task_id<\\/th>\\n      <th>n_obs<\\/th>\\n      <th>n_vars<\\/th>\\n      <th>n_factors<\\/th>\\n      <th>n_numeric<\\/th>\\n      <th>cens_prop<\\/th>\\n      <th>admin_cens_prop<\\/th>\\n      <th>dep_cens_prop<\\/th>\\n      <th>prop_haz<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":13,\"searching\":true,\"order\":[[0,\"asc\"]],\"columnDefs\":[{\"targets\":5,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":6,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":7,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"className\":\"dt-right\",\"targets\":[1,2,3,4,5,6,7]},{\"name\":\"task_id\",\"targets\":0},{\"name\":\"n_obs\",\"targets\":1},{\"name\":\"n_vars\",\"targets\":2},{\"name\":\"n_factors\",\"targets\":3},{\"name\":\"n_numeric\",\"targets\":4},{\"name\":\"cens_prop\",\"targets\":5},{\"name\":\"admin_cens_prop\",\"targets\":6},{\"name\":\"dep_cens_prop\",\"targets\":7},{\"name\":\"prop_haz\",\"targets\":8}],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,13,25,50,100],\"rowCallback\":\"function(row, data, displayNum, displayIndex, dataIndex) {\\nvar value=data[8]; $(this.api().cell(row, 8).node()).css({'background-color':value == true ? \\\"#4DAF4A\\\" : value == false ? \\\"#E41A1C\\\" : null});\\n}\"}},\"evals\":[\"options.columnDefs.0.render\",\"options.columnDefs.1.render\",\"options.columnDefs.2.render\",\"options.rowCallback\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n### Benchmarking stats {-}\n\nGet the benchmark results:\n\n::: {.cell}\n\n```{.r .cell-code}\n# see `run_bench.R`\nbench_res = readRDS(file = \"bench_res.rds\")\n```\n:::\n\n\nWe calculate the **Pearson correlation** and **root mean square error (RMSE)** between RISBS and ISBS scores per dataset ($100$ resamplings) and model:\n\n::: {.cell}\n\n```{.r .cell-code}\nscore_corrs = \n  bench_res |> \n  group_by(task_id) |> \n  select(ends_with(\"proper\")) |> \n  summarize(\n    km_cor  = cor(km_proper, km_improper),\n    cox_cor = cor(cox_proper, cox_improper),\n    aft_cor = cor(aft_proper, aft_improper),\n    km_rmse  = sqrt(mean(km_proper - km_improper)^2),\n    cox_rmse = sqrt(mean(cox_proper - cox_improper)^2),\n    aft_rmse = sqrt(mean(aft_proper - aft_improper)^2),\n  ) |> \n  arrange(desc(cox_cor))\n\nscore_corrs |>\n  datatable(\n    rownames = FALSE,\n    options = list(pageLength = 13, searching = TRUE, order = list(list(2, 'desc')))\n  ) |>\n  formatRound(columns = 2:7, digits = 3)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-b4d56505be004c8c4109\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b4d56505be004c8c4109\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"cost\",\"mgus\",\"ova\",\"uis\",\"colrec\",\"grace\",\"nwtco\",\"dataFTR\",\"channing\",\"kidtran\",\"aids.id\",\"rdata\",\"wbc1\",\"e1684\",\"gbsg\",\"dataSTR\",\"metabric\",\"nafld1\",\"liver\",\"lung\",\"std\",\"veteran\",\"whas\",\"tumor\",\"aids2\",\"support\"],[1,0.9999999999999999,1,1,0.9999911925011142,0.9996850818291312,0.9999776289511731,0.9992240819066495,0.9963887304493455,0.9995120362720006,0.9992356185106409,0.997893082385733,0.9953579765949976,0.9874342464757688,0.9920589725565674,0.9928308959687651,0.9832905303501287,0.999840736818331,0.961259178299209,0.9578955951673479,0.9650767593615264,0.9479066635335457,0.9616893347536847,0.9798367166688503,0.8758289671652648,0.5501651426954823],[1,1,1,1,0.9999997920702467,0.9998957713373687,0.9996178743556782,0.9987054833247618,0.9974691409999067,0.9968458130530483,0.9965125148264731,0.9952071886614481,0.9901513894688344,0.990014652838489,0.9889809870910098,0.9820933012092952,0.9799541837535042,0.9766240182709197,0.9683441285149659,0.9501229781362157,0.9470563626322416,0.9410461286262014,0.9391126069363087,0.9352292313895469,0.8695719299689061,0.8530764029299597],[0.9999999999999998,1,0.9999999992411213,1,0.9999998326737253,0.9999165583313302,0.999859015079287,0.997916632646661,0.9972994639894507,0.9966212188955218,0.9964306086573956,0.9943356498934092,0.9927548603298052,0.9966768460221932,0.9925817519892476,0.9646447750531115,0.9810374857898373,0.971610238750237,0.9663438785223293,0.9499152596439241,0.9408180329984862,0.9487879844521035,0.9376744514946737,0.9195840325999618,0.841742369495088,0.9025906425662827],[0,0,0,0,1.677584108150665e-06,0.0006591554297339347,0.001209654743712725,0.003386954675427923,0.004259917911818392,0.00346130637940814,0.004752604544185073,0.003835508049855832,0.009591776879412582,0.001663969509036554,0.005818452738558754,0.007236883248440551,0.01232001450366572,0.001091234492048482,0.007103708299537075,0.008904849962133215,0.01379623007942229,0.00549793600697037,0.0215766012131976,0.01463492939973727,0.01138445931257735,0.03260631366717408],[0,0,0,0,1.333842859682632e-07,0.000722479204056953,0.001307878799191368,0.003715738759635774,0.002629098654979489,0.004645069984170917,0.00538564705198439,0.004269926541313578,0.009833067170218493,0.001544384350823155,0.005228621647947091,0.008069894582255013,0.01120665832212826,0.00270262260508197,0.005869593371785998,0.004782417309276831,0.0140735874711075,0.005557935759311643,0.01352147806440553,0.01571343687192718,0.01126738439379705,0.03009511420538663],[0,0,1.605343601210341e-07,0,1.600683089361676e-07,0.0006647590209606979,0.0007701136541211062,0.004803935407381828,0.002696613691321004,0.0045696296711532,0.005437024881557449,0.004489328455657667,0.008594728982130593,0.001039242573443114,0.004232217437806184,0.01097517403686401,0.01070745562982043,0.003056740761256357,0.005811179235595533,0.004865817691251533,0.01440183122310476,0.005318351289123809,0.01252830478597281,0.01648888317272688,0.01240038770797603,0.02683263758891158]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>task_id<\\/th>\\n      <th>km_cor<\\/th>\\n      <th>cox_cor<\\/th>\\n      <th>aft_cor<\\/th>\\n      <th>km_rmse<\\/th>\\n      <th>cox_rmse<\\/th>\\n      <th>aft_rmse<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":13,\"searching\":true,\"order\":[[2,\"desc\"]],\"columnDefs\":[{\"targets\":1,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":2,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":3,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":4,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":5,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":6,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"className\":\"dt-right\",\"targets\":[1,2,3,4,5,6]},{\"name\":\"task_id\",\"targets\":0},{\"name\":\"km_cor\",\"targets\":1},{\"name\":\"cox_cor\",\"targets\":2},{\"name\":\"aft_cor\",\"targets\":3},{\"name\":\"km_rmse\",\"targets\":4},{\"name\":\"cox_rmse\",\"targets\":5},{\"name\":\"aft_rmse\",\"targets\":6}],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,13,25,50,100]}},\"evals\":[\"options.columnDefs.0.render\",\"options.columnDefs.1.render\",\"options.columnDefs.2.render\",\"options.columnDefs.3.render\",\"options.columnDefs.4.render\",\"options.columnDefs.5.render\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nMean and standard deviation of the Pearson's correlation and RMSE across all datasets:\n\n::: {.cell}\n\n```{.r .cell-code}\nscore_corrs |>\n  summarise(across(-task_id, list(mean = mean, sd = sd))) |> \n  pivot_longer(cols = everything(), \n               names_to = c(\"model\", \"statistic\", \".value\"), \n               names_pattern = \"(.*)_(.*)_(.*)\"\n  ) |>\n  knitr::kable(digits = 3)\n```\n\n::: {.cell-output-display}\n|model |statistic |  mean|    sd|\n|:-----|:---------|-----:|-----:|\n|km    |cor       | 0.967| 0.089|\n|cox   |cor       | 0.973| 0.039|\n|aft   |cor       | 0.973| 0.039|\n|km    |rmse      | 0.007| 0.008|\n|cox   |rmse      | 0.006| 0.007|\n|aft   |rmse      | 0.006| 0.006|\n:::\n:::\n\n\n### RISBS vs ISBS {-}\n\nScatter plots of RISBS vs ISBS scores per dataset ($100$ dots/resamplings per figure).\nDatasets are ordered by decreasing correlation between the two metrics:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-15_fe7969652a1216ab09f8a11d7db03c18'}\n\n```{.r .cell-code}\n# order is by decreasing correlation\nfor (id in score_corrs$task_id) {\n  p = \n    bench_res |>\n    filter(task_id == id) |>\n    select(ends_with(\"proper\")) |>\n    pivot_longer(cols = everything(), names_to = c(\"model\", \".value\"), names_pattern = \"(.*)_(.*)\") |>\n    mutate(model = factor(model, levels = c(\"km\", \"cox\", \"aft\"))) |>\n    # scatter plot with Pearson's coef.\n    ggpubr::ggscatter(\n      x = \"proper\", y = \"improper\",\n      facet.by = c(\"model\"),\n      panel.labs = list(model = c(\"Kaplan-Meier\", \"CoxPH\", \"AFT (Weibull)\")),\n      xlab = \"RISBS (proper)\",\n      ylab = \"ISBS (improper)\",\n      color = \"black\", shape = 21, size = 2,\n      add = \"reg.line\",  # Add regression line\n      add.params = list(color = \"blue\", fill = \"lightgray\"), # Customize regr. line\n      conf.int = TRUE, # Add confidence interval\n      cor.coef = TRUE, # Add Pearson's correlation coefficient\n      cor.coeff.args = list(method = \"pearson\", label.sep = \"\\n\")\n    ) +\n    labs(title = id) +\n    theme(panel.spacing = unit(1, \"cm\"))\n  print(p)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-2.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-3.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-4.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-5.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-6.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-7.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-8.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-9.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-10.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-11.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-12.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-13.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-14.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-15.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-16.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-17.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-18.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-19.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-20.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-21.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-22.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-23.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-24.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-25.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-26.png){width=768}\n:::\n:::\n\n\n### RISBS vs ISBS (per-observation scores) {-}\n\nScatter plots of RISBS vs ISBS *per-observation* scores per dataset.\nEvery figure has a total of dots equal to ($100$ resamplings) x (number of test observations in each resampling).\nDatasets are ordered by *decreasing proportion of censoring* after applying the $80\\%$ quantile `t_max` cutoff in each full dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncens_props = vapply(task_tbl$task, function(task) {\n  event_times = task$unique_event_times()\n  t_max = unname(quantile(event_times, probs = 0.8))\n  truth = task$truth()\n  times  = truth[, 1]\n  status = truth[, 2]\n  status_tmax = status[times <= t_max]\n  sum(status_tmax == 0)/length(status_tmax) # censoring proportion\n}, numeric(1))\n\nnames(cens_props) = task_tbl$task_id\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-17_21cfe290439644279ad518c0ee273335'}\n\n```{.r .cell-code}\nids = names(sort(cens_props, decreasing = TRUE))\n\nfor (id in ids) {\n  p = \n    bench_res |>\n    filter(task_id == id) |>\n    select(ends_with(\"scores\"), test_status) |> # `test_status` is the censoring status for coloring\n    unnest(cols = everything()) |>\n    pivot_longer(cols = ends_with(\"scores\"), names_to = c(\"model\", \"type\", \".value\"), names_pattern = \"(.*)_(.*)_(.*)\") |>\n    pivot_wider(names_from = type, values_from = scores, values_fn = list) |> \n    unnest(cols = everything()) |>\n    rename(Status = test_status) |>\n    mutate(Status = case_when(Status == 0 ~ \"Censored\", TRUE ~ \"Event\")) |>\n    mutate(\n      Status = as.factor(Status),\n      model = factor(model, levels = c(\"km\", \"cox\", \"aft\"))\n    ) |>\n    # scatter plot with Pearson's coef.\n    ggpubr::ggscatter(\n      x = \"proper\", y = \"improper\",\n      facet.by = c(\"model\"),\n      panel.labs = list(model = c(\"Kaplan-Meier\", \"CoxPH\", \"AFT (Weibull)\")),\n      xlab = \"RISBS (proper)\",\n      ylab = \"ISBS (improper)\",\n      color = \"Status\", shape = 21, size = 2, alpha = 0.8,\n      palette = c(\"Censored\" = \"#377eb8\", \"Event\" = \"#e41a1c\"),\n      add = \"reg.line\",  # Add regression line\n      add.params = list(color = \"blue\", fill = \"lightgray\"), # Customize regr. line\n      conf.int = TRUE, # Add confidence interval\n      cor.coef = TRUE, # Add Pearson's correlation coefficient\n      cor.coeff.args = list(method = \"pearson\", label.sep = \"\\n\")\n    ) +\n    labs(title = id) +\n    theme(panel.spacing = unit(1, \"cm\"))\n  print(p)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-2.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-3.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-4.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-5.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-6.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-7.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-8.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-9.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-10.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-11.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-12.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-13.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-14.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-15.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-16.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-17.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-18.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-19.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-20.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-21.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-22.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-23.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-24.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-25.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-26.png){width=768}\n:::\n:::\n\n\nNote that in the 4 last datasets we have censored observations with $t > t_{max}$ so they are excluded from the calculation of the brier scores as we integrate up to the `t_max` time horizon cutoff.\nTherefore only observations that have experienced the event contribute to the scores (but the estimation of the censoring distribution using the Kaplan-Meier uses all observations of a train set).\n\n## Investigate inflation of proper ISBS {-}\n\n:::{.callout-note}\nIn this section we investigate an example where the **proper ISBS gets inflated** (i.e. too large value for the score, compared to the improper version) and show how we can avoid such a thing from happening when evaluating model performance.\n:::\n\nLet's use a dataset where in a particular train/test resampling the issue occurs:\n\n::: {.cell}\n\n```{.r .cell-code}\ninflated_data = readRDS(file = \"inflated_data.rds\")\ntask = inflated_data$task\npart = inflated_data$part\n\ntask\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskSurv:mgus> (176 x 9)\n* Target: time, status\n* Properties: -\n* Features (7):\n  - dbl (6): age, alb, creat, dxyr, hgb, mspike\n  - fct (1): sex\n```\n:::\n:::\n\n\nSeparate train and test data:\n\n::: {.cell}\n\n```{.r .cell-code}\ntask_train = task$clone()$filter(rows = part$train)\ntask_test  = task$clone()$filter(rows = part$test)\n```\n:::\n\n\nKaplan-Meier of the training survival data:\n\n::: {.cell hash='index_cache/html/unnamed-chunk-20_cb5c7f48d334590e89dd4e9b17588c6d'}\n\n```{.r .cell-code}\nautoplot(task_train) +\n  labs(title = \"Kaplan-Meier (train data)\",\n       subtitle = \"Time-to-event distribution\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nKaplan-Meier of the training censoring data:\n\n::: {.cell hash='index_cache/html/unnamed-chunk-21_b35e148c242b638e9724eeadc146ab5c'}\n\n```{.r .cell-code}\nautoplot(task_train, reverse = TRUE) +\n    labs(title = \"Kaplan-Meier (train data)\",\n         subtitle = \"Censoring distribution\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nEstimates of the censoring distribution $G_{KM}(t)$ (values from the above figure):\n\n::: {.cell}\n\n```{.r .cell-code}\nkm_train = task_train$kaplan(reverse = TRUE)\nkm_tbl = tibble(time = km_train$time, surv = km_train$surv)\ntail(km_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n   time  surv\n  <dbl> <dbl>\n1 12140 0.75 \n2 12313 0.625\n3 12319 0.5  \n4 12349 0.25 \n5 12689 0.125\n6 13019 0    \n```\n:::\n:::\n\n\n:::{.callout-important}\nAs we can see from the above figures and table, due to having *at least one censored observation at the last time point*, $G_{KM}(t_{max}) = 0$ for $t_{max} = 13019$.\n:::\n\nIs there an observation **on the test set** that has died (`status` = $1$) on that last time point (or after)?\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_time = max(km_tbl$time) # max time point\n\ntest_times  = task_test$times()\ntest_status = task_test$status()\n\n# get the id of the observation in the test data\nid = which(test_times >= max_time & test_status == 1)\nid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n:::\n\n\nYes there is such observation!\n\nIn `mlr3proba` using `proper = TRUE` for the RISBS calculation, this observation will be weighted by $1/0$ according to the formula.\nPractically, to avoid division by zero, a small value `eps = 0.001` will be used.\n\nLet's train a simple Cox model on the train set and calculate its predictions on the test set:\n\n::: {.cell}\n\n```{.r .cell-code}\ncox = lrn(\"surv.coxph\")\np = cox$train(task, part$train)$predict(task, part$test)\n```\n:::\n\n\nWe calculate the ISBS (improper) and RISBS (proper) scores:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_improper = msr(\"surv.graf\", proper = FALSE, id = \"graf.improper\")\ngraf_proper   = msr(\"surv.graf\", proper = TRUE,  id = \"graf.proper\")\np$score(graf_improper, task = task, train_set = part$train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngraf.improper \n    0.1493429 \n```\n:::\n\n```{.r .cell-code}\np$score(graf_proper  , task = task, train_set = part$train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngraf.proper \n   10.64584 \n```\n:::\n:::\n\n\nAs we can see there is **huge difference** between the two versions of the score.\nWe check the *per-observation* scores (integrated across all time points):\n\nObservation-wise RISBS scores:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper$scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   0.08994417   0.02854219   0.04214266   0.15578719   0.05364692\n [6]   0.12969150   0.06463256   0.32033549   2.43262450   0.11602432\n[11]   0.03228501   0.10172088   0.14652850 367.10227335   0.18004727\n[16]   0.21991511   0.09070024   0.03507389   0.19856844   0.07925747\n[21]   0.07732517   0.06982001   0.19468406   0.05267402   0.02419841\n[26]   0.17645640   0.07633691   0.04379196   0.07839955   0.06684222\n[31]   0.05457688   0.02874430   0.04071108   0.00000000   0.00000000\n```\n:::\n:::\n\n\nObservation-wise ISBS scores:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_improper$scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.08994417 0.02854219 0.04214266 0.15578719 0.05364692 0.12969150\n [7] 0.06463256 0.32033549 0.62971109 0.11602432 0.03228501 0.10172088\n[13] 0.14652850 1.07969258 0.16743979 0.21991511 0.09070024 0.03507389\n[19] 0.19856844 0.07925747 0.07732517 0.06982001 0.19468406 0.05267402\n[25] 0.02419841 0.16199516 0.07633691 0.04379196 0.07839955 0.06684222\n[31] 0.05457688 0.02874430 0.04071108 0.03512466 0.46541333\n```\n:::\n:::\n\n\nIt is **the one observation that we identified earlier** that causes the inflation of the RISBS score - it's pretty much an outlier compared to all other values:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper$scores[id]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 367.1023\n```\n:::\n:::\n\n\nBy setting `t_max` (time horizon to evaluate the measure up to) to the $95\\%$ quantile of the event times, we can solve the inflation problem of the proper RISBS score, since we will divide by a value larger than zero from the above table of $G_{KM}(t)$ values.\nThe `t_max` time point is:\n\n::: {.cell}\n\n```{.r .cell-code}\nt_max = as.integer(quantile(task_train$unique_event_times(), 0.95))\nt_max\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10080\n```\n:::\n:::\n\n\nIntegrating up to `t_max`, the proper RISBS score is:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper_tmax = msr(\"surv.graf\", proper = TRUE, t_max = t_max)\np$score(graf_proper_tmax, task = task, train_set = part$train) # ISBS\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsurv.graf \n0.1436484 \n```\n:::\n:::\n\n\nThe score for the specific observation that had experienced the event at (or beyond) the latest training time point is now:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper_tmax$scores[id]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.141502\n```\n:::\n:::\n\n\n:::{.callout-tip title=\"Suggestion when calculating time-integrated scoring rules\"}\nTo avoid the inflation of RISBS and generally have a more robust estimation of both RISBS and ISBS scoring rules, we advise to set the `t_max` argument (time horizon).\nThis can be either study-driven or based on a meaningful quantile of the distribution of (usually event) times in your dataset (e.g. $80\\%$).\n:::\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}