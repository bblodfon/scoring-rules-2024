{
  "hash": "ef162d29b397e4ddd33b2e4f351e91da",
  "result": {
    "markdown": "---\ntitle: \"Benchmark results analysis\"\nauthor: \"[John Zobolas](https://github.com/bblodfon)\"\ndate: last-modified\ndescription: \"Explore the relationship between proper and improper Integrated Brier Score in the validation of survival models\"\nbibliography: references.bib\nformat:\n  html:\n    date: last-modified\n    code-block-bg: true\n    code-copy: true\n    code-fold: true\n    code-overflow: wrap\n    code-block-border-left: true\n    toc: true\n    toc-location: left\n    html-math-method: katex\n    page-layout: full\nexecute: \n  freeze: true\n---\n\n\n\n\n## Introduction {-}\n\nWe benchmark the two versions of the survival brier score  [@Graf1999], namely the **Integrated Survival Brier Score (ISBS)** and the proposed **we-weighted version (RISBS)** (see [documentation details](https://mlr3proba.mlr-org.com/reference/mlr_measures_surv.graf.html#details) for their respective formulas).\nThe first (ISBS) is not a proper scoring rule [@Rindt2022], the second (RISBS) is [@Sonabend2022].\nOur goal is to assess whether these scores exhibit differences in simulated and real-world datasets, and if so, to understand the reasons behind these differences.\n\nLoad libraries:\n\n::: {.cell result='false'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(mlr3proba)\nlibrary(DT)\nlibrary(ggpubr)\n```\n:::\n\n\n## Simulated Data Results {-}\n\n:::{.callout-note}\n- [Code](https://github.com/bblodfon/scoring-rules-2024/blob/main/generate.R) to generate the simulated datasets.\n\nWe simulate datasets with **varying characteristics**:\n\n1. Independent (random) vs dependent censoring\n2. PH (Proportional Hazards) vs non-PH data (time-varying coefficients)\n3. Proportion of censoring ($20\\% - 80\\%$)\n4. Number of observations ($100 - 1000$)\n\nThe 'fixed' parameters in our simulations are the following:\n\n- Time horizon (max event or censoring time): **365 days**\n- Number of datasets to generate per (1)-(4) combinations: $100$\n- Number of covariates per dataset (chosen randomly): $3-10$ (low-dim setting)\n:::\n\n## Real-world Data Results {-}\n\n:::{.callout-note}\n- [Compressed data files](https://github.com/bblodfon/scoring-rules-2024/tree/main/data)\n- [R script](https://github.com/bblodfon/scoring-rules-2024/blob/main/prepare_tasks.R) used to translate the datasets into `mlr3` tasks and extract useful info, namely:\n  - `n_obs`: Number of observations\n  - `n_vars`: Number of total variables\n  - `n_factors`: Number of factor/categorical variables\n  - `n_numeric`: Number of numeric variables\n  - `cens_prop`: Proportion of censoring\n  - `admin_cens_prop`: Proportion of censored observations that are censored administratively, i.e. at the last censoring time\n  - `dep_cens_prop`: Proportion of significant coefficients (adjusted `p < 0.05`) to predict censoring status using a logistic regression model\n  - `prop_haz`: If the dataset satisfies the proportional hazards assumption (`p > 0.05` using a global Schoenfeld test)\n- [R script](https://github.com/bblodfon/scoring-rules-2024/blob/main/run_bench.R) used to run the benchmark\n:::\n\nWe used a total of $26$ real-word, low-dimensional datasets (fewer features than observations) for benchmarking, some of which are freely available via various `R` packages.\nFor each dataset, we performed a simple train/test resampling (80%/20%) $100$ times.\n\nWe trained 3 models in each respective train set, namely the **Kaplan-Meier**, the **Cox Proportional Hazards** (CoxPH) model and an **Accelerated Failure Time** (AFT) model with Weibull distribution for the time-to-event output variable.\nWe tested the performance of each model in each respective test set using the ISBS and RISBS measures.\nWe kept also the brier scores for each specific observation (*per-observation* scores) in all respective test sets.\n\n### Datasets table {-}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# task info, see `prepare_tasks.R`\ntask_tbl = readRDS(file = \"task_tbl.rds\")\n\ntask_tbl |> \n  select(-task) |>\n  datatable(\n    rownames = FALSE, \n    options = list(pageLength = 13, searching = FALSE,\n                   order = list(list(0, 'asc')))) |>\n    formatRound(columns = 6:8, digits = 2) |>\n    formatStyle(columns = 'prop_haz',\n                backgroundColor = styleEqual(c(TRUE, FALSE), c(\"#4DAF4A\", \"#E41A1C\")))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-1def06d927cc999284a5\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-1def06d927cc999284a5\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"aids.id\",\"aids2\",\"channing\",\"colrec\",\"cost\",\"dataFTR\",\"dataSTR\",\"e1684\",\"gbsg\",\"grace\",\"kidtran\",\"liver\",\"lung\",\"metabric\",\"mgus\",\"nafld1\",\"nwtco\",\"ova\",\"rdata\",\"std\",\"support\",\"tumor\",\"uis\",\"veteran\",\"wbc1\",\"whas\"],[467,2814,458,5578,518,2206,546,284,2232,1000,863,488,228,1903,176,4000,4028,358,1040,877,4000,776,575,137,190,481],[5,4,2,5,13,2,4,3,7,6,3,2,8,9,7,5,3,5,3,21,14,7,12,6,2,9],[4,2,0,2,10,0,0,0,0,0,0,0,1,0,1,1,1,3,1,4,0,1,1,3,0,2],[1,2,2,3,3,2,4,3,7,6,3,2,7,9,6,4,2,2,2,17,14,6,11,3,2,7],[0.5974304068522484,0.3841506751954513,0.6157205240174672,0.17497310864109,0.2200772200772201,0.8640072529465095,0.815018315018315,0.3098591549295774,0.432347670250896,0.676,0.8377752027809965,0.4016393442622951,0.2763157894736842,0.4203888596952181,0.0625,0.9195,0.8582423038728898,0.2569832402234637,0.4740384615384615,0.6043329532497149,0.32375,0.5167525773195877,0.1930434782608696,0.06569343065693431,0.4263157894736842,0.4823284823284824],[0.003584229390681004,0.0009250693802035153,0.4397163120567376,0.001024590163934426,0.008771929824561403,0.001049317943336831,0.002247191011235955,0.01136363636363636,0.001036269430051813,0.7248520710059172,0.001383125864453665,0.00510204081632653,0.01587301587301587,0.00125,0.09090909090909091,0.0002718868950516585,0.0002892681515765114,0.0108695652173913,0.002028397565922921,0.001886792452830189,0.002316602316602316,0.002493765586034913,0.009009009009009009,0.1111111111111111,0.01234567901234568,0.004310344827586207],[0.3333333333333333,0,0.6666666666666666,0.8333333333333334,0.1428571428571428,0.6666666666666666,0.6,0.25,0.5,0.7142857142857143,0.5,0.6666666666666666,0.1111111111111111,0.6,0.125,0.3333333333333333,1,0.07692307692307693,0.5714285714285714,0,0.2666666666666667,0.3076923076923077,0.06666666666666667,0,0,0.4666666666666667],[true,false,true,false,false,true,true,true,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,false,true,false]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>task_id<\\/th>\\n      <th>n_obs<\\/th>\\n      <th>n_vars<\\/th>\\n      <th>n_factors<\\/th>\\n      <th>n_numeric<\\/th>\\n      <th>cens_prop<\\/th>\\n      <th>admin_cens_prop<\\/th>\\n      <th>dep_cens_prop<\\/th>\\n      <th>prop_haz<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":13,\"searching\":false,\"order\":[[0,\"asc\"]],\"columnDefs\":[{\"targets\":5,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":6,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":7,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"className\":\"dt-right\",\"targets\":[1,2,3,4,5,6,7]},{\"name\":\"task_id\",\"targets\":0},{\"name\":\"n_obs\",\"targets\":1},{\"name\":\"n_vars\",\"targets\":2},{\"name\":\"n_factors\",\"targets\":3},{\"name\":\"n_numeric\",\"targets\":4},{\"name\":\"cens_prop\",\"targets\":5},{\"name\":\"admin_cens_prop\",\"targets\":6},{\"name\":\"dep_cens_prop\",\"targets\":7},{\"name\":\"prop_haz\",\"targets\":8}],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,13,25,50,100],\"rowCallback\":\"function(row, data, displayNum, displayIndex, dataIndex) {\\nvar value=data[8]; $(this.api().cell(row, 8).node()).css({'background-color':value == true ? \\\"#4DAF4A\\\" : value == false ? \\\"#E41A1C\\\" : null});\\n}\"}},\"evals\":[\"options.columnDefs.0.render\",\"options.columnDefs.1.render\",\"options.columnDefs.2.render\",\"options.rowCallback\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nGet the benchmark results:\n\n::: {.cell}\n\n```{.r .cell-code}\n# see `run_bench.R`\nbench_res = readRDS(file = \"bench_res_tmax.rds\")\n```\n:::\n\n\n### Benchmarking stats {-}\n\nWe calculate the **Pearson correlation** and **root mean square error (RMSE)** between RISBS and ISBS scores for each dataset ($100$ resamplings) and each model:\n\n::: {.cell}\n\n```{.r .cell-code}\nscore_corrs = \n  bench_res |> \n  group_by(task_id) |> \n  select(ends_with(\"proper\")) |> \n  summarize(\n    km_cor  = cor(km_proper, km_improper),\n    cox_cor = cor(cox_proper, cox_improper),\n    aft_cor = cor(aft_proper, aft_improper),\n    km_rmse  = sqrt(mean(km_proper - km_improper)^2),\n    cox_rmse = sqrt(mean(cox_proper - cox_improper)^2),\n    aft_rmse = sqrt(mean(aft_proper - aft_improper)^2),\n  ) |> \n  rowwise() |> \n  mutate(\n    mean_cor  = mean(c_across(ends_with(\"cor\")), na.rm = TRUE),\n    mean_rmse = mean(c_across(ends_with(\"rmse\")), na.rm = TRUE)\n  ) |> \n  ungroup() |> \n  arrange(desc(mean_cor))\n\nscore_corrs |>\n  datatable(\n    rownames = FALSE,\n    options = list(pageLength = 13, searching = FALSE,\n                   order = list(list(7, 'desc')))) |>\n    formatRound(columns = 2:9, digits = 3)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-388088f1f8f8d4439529\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-388088f1f8f8d4439529\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"mgus\",\"uis\",\"cost\",\"ova\",\"aids.id\",\"colrec\",\"grace\",\"nwtco\",\"e1684\",\"dataFTR\",\"kidtran\",\"channing\",\"wbc1\",\"rdata\",\"gbsg\",\"metabric\",\"nafld1\",\"liver\",\"dataSTR\",\"lung\",\"std\",\"whas\",\"veteran\",\"tumor\",\"aids2\",\"support\"],[0.9999999999999999,1,1,1,0.9999974775498958,0.9999911925011142,0.9996850818291312,0.9999776289511731,0.9994175279133308,0.9992240819066495,0.9995120362720006,0.9963887304493455,0.9973274314084082,0.997893082385733,0.9926819237957166,0.9841983223817505,0.999840736818331,0.9797010611085292,0.9930515245343804,0.9578955951673479,0.9650767593615264,0.9616893347536847,0.9479066635335457,0.9798367166688503,0.8758289671652648,0.5501651426954823],[1,1,1,0.9999999999999999,0.9999997201131987,0.9999997920702467,0.9998957713373687,0.9996178743556782,0.9995367263986038,0.9987054833247618,0.9968458130530483,0.9974691409999067,0.9950864260475469,0.9952071886614481,0.9893169700858135,0.9819511052358293,0.9766240182709197,0.9804667655270295,0.9821711601739345,0.9501229781362157,0.9470563626322416,0.9391126069363087,0.9410461286262014,0.9352292313895469,0.8695719299689061,0.8530764029299597],[1,1,0.9999999999999998,0.9999999991771283,0.9999997531468515,0.9999998326737253,0.9999165583313302,0.999859015079287,0.9997774676045043,0.997916632646661,0.9966212188955218,0.9972994639894507,0.9965424279402543,0.9943356498934092,0.9927513653141143,0.9829261058920362,0.971610238750237,0.9805795809961569,0.9639581118182305,0.9499152596439241,0.9408180329984862,0.9376744514946737,0.9487879844521035,0.9195840325999618,0.841742369495088,0.9025906425662827],[0,0,0,0,3.060339003182116e-05,1.677584108150665e-06,0.0006591554297339347,0.001209654743712725,0.0005078740668580156,0.003386954675427923,0.00346130637940814,0.004259917911818392,0.007485302917960656,0.003835508049855832,0.005591759407440941,0.01226003164391563,0.001091234492048482,0.005970655124833954,0.006451722162836938,0.008904849962133215,0.01379623007942229,0.0215766012131976,0.00549793600697037,0.01463492939973727,0.01138445931257735,0.03260631366717408],[0,0,0,0,1.04568970210922e-05,1.333842859682632e-07,0.000722479204056953,0.001307878799191368,0.0003958562654835868,0.003715738759635774,0.004645069984170917,0.002629098654979489,0.007559624522980638,0.004269926541313578,0.00509721230758021,0.01110198704196172,0.00270262260508197,0.005368066515840452,0.007572614532392868,0.004782417309276831,0.0140735874711075,0.01352147806440553,0.005557935759311643,0.01571343687192718,0.01126738439379705,0.03009511420538663],[0,0,0,2.134628129404903e-07,9.64817687412134e-06,1.600683089361676e-07,0.0006647590209606979,0.0007701136541211062,0.0002624370892461009,0.004803935407381828,0.0045696296711532,0.002696613691321004,0.006449598774039436,0.004489328455657667,0.004132351966698197,0.01059978271973086,0.003056740761256357,0.00519413951120313,0.01032241344199379,0.004865817691251533,0.01440183122310476,0.01252830478597281,0.005318351289123809,0.01648888317272688,0.01240038770797603,0.02683263758891158],[1,1,0.9999999999999999,0.9999999997257094,0.9999989836033153,0.9999969390816954,0.9998324704992767,0.9998181727953794,0.9995772406388129,0.9986153992926907,0.9976596894068569,0.9970524451462343,0.9963187617987365,0.9958119736468635,0.9915834197318815,0.9830251778365386,0.9826916646131626,0.9802491358772385,0.9797269321755151,0.9526446109824959,0.9509837183307513,0.9461587977282223,0.9459135922039502,0.9448833268861196,0.8623810888764196,0.7686107293972416],[0,0,0,7.115427098016343e-08,1.690282130901157e-05,6.570122343516986e-07,0.0006821312182505285,0.0010958823990084,0.0003887224738625678,0.003968876280815175,0.004225335344910753,0.003195210086039629,0.007164842071660243,0.004198254348942359,0.004940441227239783,0.01132060046853607,0.00228353261946227,0.005510953717292512,0.008115583379074531,0.006184361654220526,0.01409054959121152,0.01587546135452531,0.00545807435180194,0.01561241648146378,0.01168407713811681,0.02984468848715743]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>task_id<\\/th>\\n      <th>km_cor<\\/th>\\n      <th>cox_cor<\\/th>\\n      <th>aft_cor<\\/th>\\n      <th>km_rmse<\\/th>\\n      <th>cox_rmse<\\/th>\\n      <th>aft_rmse<\\/th>\\n      <th>mean_cor<\\/th>\\n      <th>mean_rmse<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":13,\"searching\":false,\"order\":[[7,\"desc\"]],\"columnDefs\":[{\"targets\":1,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":2,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":3,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":4,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":5,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":6,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":7,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":8,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 3, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"className\":\"dt-right\",\"targets\":[1,2,3,4,5,6,7,8]},{\"name\":\"task_id\",\"targets\":0},{\"name\":\"km_cor\",\"targets\":1},{\"name\":\"cox_cor\",\"targets\":2},{\"name\":\"aft_cor\",\"targets\":3},{\"name\":\"km_rmse\",\"targets\":4},{\"name\":\"cox_rmse\",\"targets\":5},{\"name\":\"aft_rmse\",\"targets\":6},{\"name\":\"mean_cor\",\"targets\":7},{\"name\":\"mean_rmse\",\"targets\":8}],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,13,25,50,100]}},\"evals\":[\"options.columnDefs.0.render\",\"options.columnDefs.1.render\",\"options.columnDefs.2.render\",\"options.columnDefs.3.render\",\"options.columnDefs.4.render\",\"options.columnDefs.5.render\",\"options.columnDefs.6.render\",\"options.columnDefs.7.render\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n### RISBS vs ISBS {-}\n\nVisually comparing RISBS and ISBS scores per dataset:\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_c23d896edbada66f36ccb514d9a690b4'}\n\n```{.r .cell-code}\nfor (id in score_corrs$task_id) {\n  p = \n    bench_res |>\n    filter(task_id == id) |>\n    select(ends_with(\"proper\")) |>\n    pivot_longer(cols = everything(), names_to = c(\"model\", \".value\"), names_pattern = \"(.*)_(.*)\") |>\n    mutate(model = factor(model, levels = c(\"km\", \"cox\", \"aft\"))) |>\n    # scatter plot with Pearson's coef.\n    ggpubr::ggscatter(\n      x = \"proper\", y = \"improper\",\n      facet.by = c(\"model\"),\n      panel.labs = list(model = c(\"Kaplan-Meier\", \"CoxPH\", \"AFT (Weibull)\")),\n      xlab = \"RISBS (proper)\",\n      ylab = \"ISBS (improper)\",\n      color = \"black\", shape = 21, size = 2,\n      add = \"reg.line\",  # Add regression line\n      add.params = list(color = \"blue\", fill = \"lightgray\"), # Customize regr. line\n      conf.int = TRUE, # Add confidence interval\n      cor.coef = TRUE, # Add Pearson's correlation coefficient\n      cor.coeff.args = list(method = \"pearson\", label.sep = \"\\n\")\n    ) +\n    labs(title = id) +\n    theme(panel.spacing = unit(1, \"cm\"))\n  print(p)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-2.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-3.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-4.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-5.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-6.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-7.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-8.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-9.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-10.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-11.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-12.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-13.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-14.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-15.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-16.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-17.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-18.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-19.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-20.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-21.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-22.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-23.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-24.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-25.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-26.png){width=768}\n:::\n:::\n\n\n### RISBS vs ISBS (per-observation) {-}\n\nVisually comparing RISBS and ISBS *per-observation* scores per dataset (TO COLOR BY CENSORING STATUS):\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_2d89f2149bbdcb2207f5a58bdd3c22c2'}\n\n```{.r .cell-code}\nfor (id in score_corrs$task_id) {\n  p = \n    bench_res |>\n    filter(task_id == id) |>\n    select(ends_with(\"scores\")) |>  # add censored column for coloring\n    unnest(cols = everything()) |>\n    pivot_longer(cols = everything(), names_to = c(\"model\", \"type\", \".value\"), names_pattern = \"(.*)_(.*)_(.*)\") |>\n    pivot_wider(names_from = type, values_from = scores, values_fn = list) |> \n    unnest(cols = everything()) |>\n    mutate(model = factor(model, levels = c(\"km\", \"cox\", \"aft\"))) |>\n    # scatter plot with Pearson's coef.\n    ggpubr::ggscatter(\n      x = \"proper\", y = \"improper\",\n      facet.by = c(\"model\"),\n      panel.labs = list(model = c(\"Kaplan-Meier\", \"CoxPH\", \"AFT (Weibull)\")),\n      xlab = \"RISBS (proper)\",\n      ylab = \"ISBS (improper)\",\n      color = \"black\", shape = 21, size = 2,\n      add = \"reg.line\",  # Add regression line\n      add.params = list(color = \"blue\", fill = \"lightgray\"), # Customize regr. line\n      conf.int = TRUE, # Add confidence interval\n      cor.coef = TRUE, # Add Pearson's correlation coefficient\n      cor.coeff.args = list(method = \"pearson\", label.sep = \"\\n\")\n    ) +\n    labs(title = id) +\n    theme(panel.spacing = unit(1, \"cm\"))\n  print(p)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-3.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-4.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-5.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-6.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-7.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-8.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-9.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-10.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-11.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-12.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-13.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-14.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-15.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-16.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-17.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-18.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-19.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-20.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-21.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-22.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-23.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-24.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-25.png){width=768}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-26.png){width=768}\n:::\n:::\n\n\n## Investigate inflation of proper ISBS {-}\n\n:::{.callout-note}\nIn this section we investigate an example where the **proper ISBS gets inflated** (i.e. too large value for the score, compared to the improper version) and show how we can avoid such a thing from happening when evaluating model performance.\n:::\n\nLet's use a dataset where in a particular train/test resampling the issue occurs:\n\n::: {.cell}\n\n```{.r .cell-code}\ninflated_data = readRDS(file = \"inflated_data.rds\")\ntask = inflated_data$task\npart = inflated_data$part\n\ntask\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskSurv:mgus> (176 x 9)\n* Target: time, status\n* Properties: -\n* Features (7):\n  - dbl (6): age, alb, creat, dxyr, hgb, mspike\n  - fct (1): sex\n```\n:::\n:::\n\n\nSeparate train and test data:\n\n::: {.cell}\n\n```{.r .cell-code}\ntask_train = task$clone()$filter(rows = part$train)\ntask_test  = task$clone()$filter(rows = part$test)\n```\n:::\n\n\nKaplan-Meier of the training survival data:\n\n::: {.cell hash='index_cache/html/unnamed-chunk-9_85bb87dc3b3c5b6c94c058cc8105bd79'}\n\n```{.r .cell-code}\nautoplot(task_train) +\n  labs(title = \"Kaplan-Meier (train data)\",\n       subtitle = \"Time-to-event distribution\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nKaplan-Meier of the training censoring data:\n\n::: {.cell hash='index_cache/html/unnamed-chunk-10_cfc66cd267aeb7039790ba99a51af020'}\n\n```{.r .cell-code}\nautoplot(task_train, reverse = TRUE) +\n    labs(title = \"Kaplan-Meier (train data)\",\n         subtitle = \"Censoring distribution\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nEstimates of the censoring distribution $G_{KM}(t)$ (values from the above figure):\n\n::: {.cell}\n\n```{.r .cell-code}\nkm_train = task_train$kaplan(reverse = TRUE)\nkm_tbl = tibble(time = km_train$time, surv = km_train$surv)\ntail(km_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n   time  surv\n  <dbl> <dbl>\n1 12140 0.75 \n2 12313 0.625\n3 12319 0.5  \n4 12349 0.25 \n5 12689 0.125\n6 13019 0    \n```\n:::\n:::\n\n\n:::{.callout-important}\nAs we can see from the above figures and table, due to having *at least one censored observation at the last time point*, $G_{KM}(t_{max}) = 0$ for $t_{max} = 13019$.\n:::\n\nIs there an observation **on the test set** that has died (`status` = $1$) on that last time point (or after)?\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_time = max(km_tbl$time) # max time point\n\ntest_times  = task_test$times()\ntest_status = task_test$status()\n\n# get the id of the observation in the test data\nid = which(test_times >= max_time & test_status == 1)\nid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n:::\n\n\nYes there is such observation!\n\nIn `mlr3proba` using `proper = TRUE` for the RISBS calculation, this observation will be weighted by $1/0$ according to the formula.\nPractically, to avoid division by zero, a small value `eps = 0.001` will be used.\n\nLet's train a simple Cox model on the train set and calculate its predictions on the test set:\n\n::: {.cell}\n\n```{.r .cell-code}\ncox = lrn(\"surv.coxph\")\np = cox$train(task, part$train)$predict(task, part$test)\n```\n:::\n\n\nWe calculate the ISBS (improper) and RISBS (proper) scores:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_improper = msr(\"surv.graf\", proper = FALSE, id = \"graf.improper\")\ngraf_proper   = msr(\"surv.graf\", proper = TRUE,  id = \"graf.proper\")\np$score(graf_improper, task = task, train_set = part$train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngraf.improper \n    0.1493429 \n```\n:::\n\n```{.r .cell-code}\np$score(graf_proper  , task = task, train_set = part$train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngraf.proper \n   10.64584 \n```\n:::\n:::\n\n\nAs we can see there is **huge difference** between the two versions of the score.\nWe check the *per-observation* scores (integrated across all time points):\n\nObservation-wise RISBS scores:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper$scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   0.08994417   0.02854219   0.04214266   0.15578719   0.05364692\n [6]   0.12969150   0.06463256   0.32033549   2.43262450   0.11602432\n[11]   0.03228501   0.10172088   0.14652850 367.10227335   0.18004727\n[16]   0.21991511   0.09070024   0.03507389   0.19856844   0.07925747\n[21]   0.07732517   0.06982001   0.19468406   0.05267402   0.02419841\n[26]   0.17645640   0.07633691   0.04379196   0.07839955   0.06684222\n[31]   0.05457688   0.02874430   0.04071108   0.00000000   0.00000000\n```\n:::\n:::\n\n\nObservation-wise ISBS scores:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_improper$scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.08994417 0.02854219 0.04214266 0.15578719 0.05364692 0.12969150\n [7] 0.06463256 0.32033549 0.62971109 0.11602432 0.03228501 0.10172088\n[13] 0.14652850 1.07969258 0.16743979 0.21991511 0.09070024 0.03507389\n[19] 0.19856844 0.07925747 0.07732517 0.06982001 0.19468406 0.05267402\n[25] 0.02419841 0.16199516 0.07633691 0.04379196 0.07839955 0.06684222\n[31] 0.05457688 0.02874430 0.04071108 0.03512466 0.46541333\n```\n:::\n:::\n\n\nIt is **the one observation that we identified earlier** that causes the inflation of the RISBS score - it's pretty much an outlier compared to all other values:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper$scores[id]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 367.1023\n```\n:::\n:::\n\n\nBy setting `t_max` (time horizon to evaluate the measure up to) to the $95\\%$ quantile of the event times, we can solve the inflation problem of the proper RISBS score, since we will divide by a value larger than zero from the above table of $G_{KM}(t)$ values.\nThe `t_max` time point is:\n\n::: {.cell}\n\n```{.r .cell-code}\nt_max = as.integer(quantile(task_train$unique_event_times(), 0.95))\nt_max\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10080\n```\n:::\n:::\n\n\nIntegrating up to `t_max`, the proper RISBS score is:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper_tmax = msr(\"surv.graf\", proper = TRUE, t_max = t_max)\np$score(graf_proper_tmax, task = task, train_set = part$train) # ISBS\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsurv.graf \n0.1436484 \n```\n:::\n:::\n\n\nThe score for the specific observation that had experienced the event at (or beyond) the latest training time point is now:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper_tmax$scores[id]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.141502\n```\n:::\n:::\n\n\n:::{.callout-tip title=\"Suggestion when calculating time-integrated scoring rules\"}\nTo avoid the inflation of RISBS and generally have a more robust estimation of both RISBS and ISBS scoring rules, we advise to set the `t_max` argument (time horizon).\nThis can be either study-driven or based on a meaningful quantile of the distribution of (usually event) times in your dataset (e.g. $80\\%$).\n:::\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}